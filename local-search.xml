<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>计算机算法-2</title>
    <link href="/2024/12/27/%E7%AE%97%E6%B3%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AE%97%E6%B3%95-2/"/>
    <url>/2024/12/27/%E7%AE%97%E6%B3%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AE%97%E6%B3%95-2/</url>
    
    <content type="html"><![CDATA[<h1 id="递归与分治">递归与分治</h1><h2 id="一递归">一、递归</h2><h3 id="阶乘函数">1、阶乘函数</h3><blockquote><p>递归基本思想：直接或间接调用自身的算法称为递归算法</p></blockquote><ol type="1"><li>阶乘函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">factorial</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> n * factorial(n-<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li>阶乘函数的尾递归版本</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">factorial</span>(<span class="hljs-params">n, acc=<span class="hljs-number">1</span></span>):<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> acc<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> factorial(n-<span class="hljs-number">1</span>, acc*n)<br></code></pre></td></tr></table></figure><h3 id="斐波那契数列">2、斐波那契数列</h3><ol type="1"><li>斐波那契数列</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fibonacci</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">elif</span> n == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> fibonacci(n-<span class="hljs-number">1</span>) + fibonacci(n-<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><ol start="3" type="1"><li>计算斐波那契数列的尾递归版本 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fibonacci</span>(<span class="hljs-params">n, a=<span class="hljs-number">0</span>, b=<span class="hljs-number">1</span></span>):<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> a<br>    <span class="hljs-keyword">elif</span> n == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> b<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> fibonacci(n-<span class="hljs-number">1</span>, b, a+b)<br></code></pre></td></tr></table></figure></li></ol><h3 id="排列问题">3、排列问题</h3><ul><li>描述：对数组中的元素进行全排列</li><li>思考：对一个长度为n的数组进行排序，相当于将这个数组中的每一个元素分别提取出来，再将剩下的元素进行全排列。也就是说，将每一个元素提取出来放在数组的最前面，剩下的元素再进行全排列。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">Perm</span>(<span class="hljs-params">nums:<span class="hljs-built_in">list</span>[<span class="hljs-built_in">int</span>],l:<span class="hljs-built_in">int</span>,r:<span class="hljs-built_in">int</span></span>)-&gt;<span class="hljs-literal">None</span>:  <span class="hljs-comment"># noqa: E741</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    nums:用于存放数组</span><br><span class="hljs-string">    l:是数组的左边界，会变化，要进行交换的位置</span><br><span class="hljs-string">    r：是数组的右边界</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">if</span> l==r:<br>        <span class="hljs-built_in">print</span>(nums)<br>    <span class="hljs-keyword">else</span>:<br>        i=l<br>        <span class="hljs-keyword">while</span>(i&lt;=<span class="hljs-built_in">len</span>(nums)-<span class="hljs-number">1</span>):<br>            <span class="hljs-comment"># //交换位置</span><br>            swap(nums,l,i)<br>            <span class="hljs-comment"># //进行递归</span><br>            Perm(nums,l+<span class="hljs-number">1</span>,r)<br>            swap(nums,l,i)<br>            i+=<span class="hljs-number">1</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">swap</span>(<span class="hljs-params">nums,a,b</span>):<br>    temp=nums[b]<br>    nums[b]=nums[a]<br>    nums[a]=temp<br>nums=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>Perm(nums,l=<span class="hljs-number">0</span>,r=<span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure><h3 id="整数划分问题">4、整数划分问题</h3><ul><li>描述：将一个整数划分成一系列整数的和</li><li>思考：这是一个双递归函数。在正整数n的所有划分中，将最大加数<span class="math inline">\(n_1\)</span>不大于m的划分个数记作<span class="math inline">\(q(n,m)\)</span></li></ul><p><span class="math display">\[q(n,m)=\begin{cases}1,&amp;\text{n=1,m=1}\\q(n,n),&amp;\text{n&lt;m}\\1+q(n,n-1),&amp;\text{n=m}\\q(n,m-1)+q(n-m,m),&amp;\text{n&gt;m&gt;1}\end{cases}\]</span></p><p>根据n和m的关系，考虑以下几种情况： 1.当n=1时，不论m的值为多少（m&gt;0)，只有一种划分即{1}; 2.当m=1时，不论n的值为多少，只有一种划分即n个1，{1,1,1,...,1}; 3.当n=m时，根据划分中是否包含n，可以分为两种情况： 1.划分中包含n的情况，只有一个即{n}； 2.划分中不包含n的情况，这时划分中最大的数字也一定比n小，即n的所有(n-1)划分。因此 f(n,n) =1 + f(n,n-1); 4.当n&lt;m时，由于划分中不可能出现负数，因此就相当于f(n,n); 5.但n&gt;m时，根据划分中是否包含最大值m，可以分为两种情况： 1.划分中包含m的情况，即{m, {x1,x2,...xi}}, 其中{x1,x2,... xi}的和为n-m，因此这情况下为f(n-m,m) 2.划分中不包含m的情况，则划分中所有值都比m小，即n的(m-1)划分，个数为f(n,m-1);因此 f(n, m) = f(n-m, m)+f(n,m-1);</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">q</span>(<span class="hljs-params">n:<span class="hljs-built_in">int</span>,m:<span class="hljs-built_in">int</span></span>)-&gt;<span class="hljs-built_in">int</span>:<br>    <span class="hljs-keyword">if</span> n&lt;<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> m&lt;<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">elif</span> n==<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> m==<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">elif</span> n==m:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>+q(n,n-<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">elif</span> n&lt;m:<br>        <span class="hljs-keyword">return</span> q(n,n)<br>    <span class="hljs-keyword">elif</span> n&gt;m:<br>        <span class="hljs-keyword">return</span> q(n,m-<span class="hljs-number">1</span>)+q(n-m,m)<br></code></pre></td></tr></table></figure><blockquote><p>递归算法的优点：结构清晰，可读性强，而且容易使用数学归纳法来证明算法的正确性。</p><p>递归算法的缺点：算法的运行效率较低，时间和空间消耗都比非递归算法要多。</p></blockquote><h2 id="二分治">二、分治</h2><blockquote><p>基本思想：将一个规模为n的问题分解为k个规模较小的子问题，这些子问题相互独立且与原问题相同，通过递归解决这些子问题，然后将各个子问题的解合并得到原问题的解。</p><p>分割原则：</p><ul><li>如何对原问题进行分割？<ul><li>在实践中发现，在使用分治法设计算法时，最好使得子问题的规模大致相同</li></ul></li></ul></blockquote><h3 id="棋盘覆盖算法">1、棋盘覆盖算法</h3><ul><li>描述：在一个<span class="math inline">\(2^k \times2^k\)</span>个方格组成的棋盘中，有一个方格与其他方格不同，则称该方格为一个特殊方格，且称该棋盘为一个特殊棋盘。在棋盘覆盖问题中，要用的4种不同形态的L型骨牌覆盖一个给定的特殊棋盘上除特殊方格以外的所有方格，且任何2个L型骨牌不得重叠覆盖。易知，在任何一个<span class="math inline">\(2^k \times2^k\)</span>的棋盘覆盖中，用到的L型骨牌个数恰为<span class="math inline">\((4^k-1)/3\)</span>。</li><li>思考：面对一个<span class="math inline">\(2^k \times2^k\)</span>个方格组成的棋盘，将其分成四个等大的小棋盘，如果存在一个特殊方格在一个小棋盘上，则将这个L型的骨牌覆盖其他三个小棋盘。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python">ti = <span class="hljs-number">0</span>  <span class="hljs-comment"># 骨牌编号</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">tr, tc, dr, dc, size</span>):<br>    <span class="hljs-keyword">global</span> ti, matrix<br>    <span class="hljs-keyword">if</span> size == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span>  <span class="hljs-comment"># 当棋盘分割到1x1时终止递归</span><br>    <span class="hljs-keyword">else</span>:<br>        s = size // <span class="hljs-number">2</span>  <span class="hljs-comment"># 分割棋盘</span><br>        ti += <span class="hljs-number">1</span>  <span class="hljs-comment"># 对骨牌进行编号</span><br>        t=title<br>        <span class="hljs-comment"># 检查特殊方块在哪个子棋盘</span><br>        <span class="hljs-keyword">if</span> dr &lt; tr + s <span class="hljs-keyword">and</span> dc &lt; tc + s:  <span class="hljs-comment"># 左上子棋盘</span><br>            func(tr, tc, dr, dc, s)<br>        <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 左上子棋盘放置L型骨牌</span><br>            matrix[tr + s - <span class="hljs-number">1</span>][tc + s - <span class="hljs-number">1</span>] = t<br>            func(tr, tc, tr + s - <span class="hljs-number">1</span>, tc + s - <span class="hljs-number">1</span>, s)<br>        <span class="hljs-keyword">if</span> dr &lt; tr + s <span class="hljs-keyword">and</span> dc &gt;= tc + s:  <span class="hljs-comment"># 右上子棋盘</span><br>            func(tr, tc + s, dr, dc, s)<br>        <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 右上子棋盘放置L型骨牌</span><br>            matrix[tr + s - <span class="hljs-number">1</span>][tc + s] = t<br>            func(tr, tc + s, tr + s - <span class="hljs-number">1</span>, tc + s, s)<br>        <span class="hljs-keyword">if</span> dr &gt;= tr + s <span class="hljs-keyword">and</span> dc &lt; tc + s:  <span class="hljs-comment"># 左下子棋盘</span><br>            func(tr + s, tc, dr, dc, s)<br>        <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 左下子棋盘放置L型骨牌</span><br>            matrix[tr + s][tc + s - <span class="hljs-number">1</span>] = t<br>            func(tr + s, tc, tr + s, tc + s - <span class="hljs-number">1</span>, s)<br>        <span class="hljs-keyword">if</span> dr &gt;= tr + s <span class="hljs-keyword">and</span> dc &gt;= tc + s:  <span class="hljs-comment"># 右下子棋盘</span><br>            func(tr + s, tc + s, dr, dc, s)<br>        <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 右下子棋盘放置L型骨牌</span><br>            matrix[tr + s][tc + s] = t<br>            func(tr + s, tc + s, tr + s, tc + s, s)<br>matrix = [[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>)] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>)]<br>func(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>)<br><span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> matrix:<br>    <span class="hljs-built_in">print</span>(row)<br></code></pre></td></tr></table></figure><h3 id="线性时间选择">2、线性时间选择</h3><ul><li>描述：在n个元素的无序数组中选择第k小元素<ul><li>当k=1时，相当于找最小值</li><li>当k=n时，相当于找最大值</li><li>当k=<span class="math inline">\(\frac{n}{2}\)</span>时，相当于找中值</li></ul></li><li>想法：对于这个数组进行以下处理<ul><li>首先进行分组，将数组中的元素每五个划分成一个数组，当单个数组中元素数量小于6时直接进行排序</li><li>对每个数组找出其中的中位数，并将所有中位数写到一个数组中，再递归找出这个由中位数组成的数组的中位数，经过这一步也就找到了原数组的中位数</li><li>根据这个中位数，对原数组进行简单的划分，分成三部分，小于中位数，等于中位数，大于中位数</li><li>通过判断k在哪一部分进行舍弃，就是小于中位数的数组长度与k进行比较</li><li>留下来的部分再重复上述步骤</li></ul></li></ul><h3 id="二分搜索术">3、二分搜索术</h3><ul><li>描述：将n个元素分成个数大致相同的两半，取a[n/2]与x作比较。如果x=a[n/2]，则算法终止；如果x&lt;a[n/2]，则只在数组a的左半部继续搜索x；如果x&gt;a[n/2]，则只在数组a的右半部继续搜索x。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params">nums:<span class="hljs-built_in">list</span>,x:<span class="hljs-built_in">int</span>,l:<span class="hljs-built_in">int</span>,r:<span class="hljs-built_in">int</span></span>)-&gt;<span class="hljs-built_in">bool</span>:<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    nums:数组列表</span><br><span class="hljs-string">    x:目标搜索对象</span><br><span class="hljs-string">    l:左边界</span><br><span class="hljs-string">    r:右边界</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">if</span> l&gt;r:<br>        <span class="hljs-keyword">return</span> false<br>    <span class="hljs-keyword">else</span>:<br>        mid=(l+r)//<span class="hljs-number">2</span><span class="hljs-comment">#计算中间坐标</span><br>        <span class="hljs-keyword">if</span> nums[mid]==x:<br>            <span class="hljs-keyword">return</span> true<br>        <span class="hljs-keyword">elif</span> nums[mid]&lt;x:<br>            <span class="hljs-keyword">return</span> fun(nums,x,mid+<span class="hljs-number">1</span>,r)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> fun(nums,x,l,mid-<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>计算机算法-1</title>
    <link href="/2024/12/25/%E7%AE%97%E6%B3%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AE%97%E6%B3%95-1/"/>
    <url>/2024/12/25/%E7%AE%97%E6%B3%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AE%97%E6%B3%95-1/</url>
    
    <content type="html"><![CDATA[<h1 id="算法效率基础">算法效率基础</h1><p><strong>算法分析是对算法需要多少计算时间和存储空间作定量的分析,因此算法的复杂性存在空间复杂性和时间复杂性两个方面。算法的复杂性是算法运行需要的计算机资源的量。</strong></p><h2 id="影响算法复杂性的因素">1. 影响算法复杂性的因素</h2><ol type="1"><li>要解的问题的规模：问题本身</li><li>算法的输入：要处理的数据</li><li>算法本身的函数：处理问题的方法</li></ol><h2 id="元运算">2. 元运算</h2><blockquote><p>对任何计算步骤，他的代价总是一个时间常量为上界，不管数据输入或执行的算法，我们称该步骤为“元运算”。通俗讲就是时间固定</p></blockquote><blockquote><p>举例：访问数组中的一个元素就是一个“元运算”，因为不管你的数组有多大，访问任何一个特定位置的元素所需的时间都是相同的，这个时间是一个常数，不会随着数组大小的变化而变化。</p></blockquote><h2 id="如何度量运行时间即算法的时间复杂度">3.如何度量运行时间（即算法的时间复杂度）</h2><blockquote><p>用算法的基本操作的执行次数来度量算法的时间效率</p></blockquote><blockquote><p>所谓的基本操作，就是指算法中最基本的操作，比如：赋值、比较、输入输出等。</p></blockquote><h2 id="算法复杂性符号表示">4. 算法复杂性符号表示</h2><ol type="1"><li>Θ：是渐进紧确界记号，当且仅当<span class="math inline">\(\lim\limits_{n\rightarrow\infty}\frac{f(n)}{g(n)}\)</span>存在并等于一个常数，那么f(n)=Θ(g(n))。也就是f(n)和g(n)同阶。</li><li>O：是渐进上界记号，当存在正整数c和<span class="math inline">\(n_0\)</span>，使得当n&gt;=<span class="math inline">\(n_0\)</span>时，f(n)&lt;=cg(n)。则f(n)的渐进上界是g(n),f(n)=O(g(n))。通俗说当n在一定范围内时，函数f(n)的阶不高于函数g(n)。g(n)的阶越低越精确。</li><li>Ω：是渐进下界记号，当存在正整数c和<span class="math inline">\(n_0\)</span>，使得当n&gt;=<span class="math inline">\(n_0\)</span>时，f(n)&gt;=cg(n)。则f(n)的渐进下界是g(n),f(n)=O(g(n))。通俗说当n在一定范围内时，函数f(n)的阶不低于函数g(n)。g(n)的阶越高越精确。<img src="/2024/12/25/%E7%AE%97%E6%B3%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AE%97%E6%B3%95-1/image.png" alt="&#39;图片1&#39;"> ## 5.如何分析非递归算法效率</li><li>找出算法的基本操作</li><li>检查基本操作的执行次数是否只依赖输入规模</li><li>建立一个算法基本操作执行次数的求和表达式 ## 6.如何分析递归算法效率</li><li>找出递归的边界条件,一般而言递归的边界条件是n=1，而且是进行切半的操作。<span class="math display">\[T(n)=\begin{cases}O(1),&amp;\text{n=1}\\kT(n/2)+O(1),&amp;\text{n&gt;1}\end{cases}\]</span></li><li>分析递归式的解法</li><li>计算递归式的解法的执行次数</li><li>建立递归式的解法的执行次数的求和表达式（注：递归算法代码简洁，但是效率低下） ## 7. 主定理解决递归效率问题</li></ol><ul><li>主定理提供一个通用的方法来解决形如<span class="math inline">\(T(n)=aT(n/b)+f(n)\)</span>的递归式的效率问题。</li></ul><ol type="1"><li>n：是问题的规模</li><li>a：是原问题的子问题个数</li><li><span class="math inline">\(\frac{n}{b}\)</span>：是子问题的规模大小</li><li>f(n)：是将原问题分解成子问题和将子问题的解合并成原问题的解的时间<img src="/2024/12/25/%E7%AE%97%E6%B3%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AE%97%E6%B3%95-1/image-1.png" alt="alt text"></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/12/25/hello-world/"/>
    <url>/2024/12/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
