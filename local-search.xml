<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>事件流</title>
    <link href="/2025/01/17/JavaScript%E4%B8%8EWebAPI%E5%9F%BA%E7%A1%80/%E4%BA%8B%E4%BB%B6%E6%B5%81/"/>
    <url>/2025/01/17/JavaScript%E4%B8%8EWebAPI%E5%9F%BA%E7%A1%80/%E4%BA%8B%E4%BB%B6%E6%B5%81/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>JavaScript与Web API</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>DOM</title>
    <link href="/2025/01/17/JavaScript%E4%B8%8EWebAPI%E5%9F%BA%E7%A1%80/DOM/"/>
    <url>/2025/01/17/JavaScript%E4%B8%8EWebAPI%E5%9F%BA%E7%A1%80/DOM/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是dom">什么是DOM</h1><p>DOM 是“Document Object Model（文档对象模型）”的缩写，它是 HTML 和 XML文档的编程接口，提供了对文档的结构化表示，并且可以使用诸如 JavaScript等编程语言来访问和操作文档中的元素、属性和事件等。以下是关于 DOM的详细介绍：</p><h2 id="dom-的结构">DOM 的结构</h2><ul><li><p><strong>节点（Node）</strong></p><ul><li><strong>元素节点（Element Node）</strong>：对应于 HTML 或 XML文档中的元素，如 <code>&lt;div&gt;</code>、<code>&lt;p&gt;</code>等。元素节点是 DOM树的主要组成部分，可以包含其他元素节点、文本节点等。</li><li><strong>属性节点（Attribute Node）</strong>：定义了元素的属性，如<code>&lt;img src="image.jpg"&gt;</code> 中的 <code>src</code>就是一个属性节点。不过在 DOM中，属性通常被视为元素节点的一部分，而不是独立的节点。</li><li><strong>文本节点（Text Node）</strong>：包含元素的文本内容。例如在<code>&lt;p&gt;Hello, world!&lt;/p&gt;</code> 中，“Hello, world!”就是一个文本节点。</li><li><strong>注释节点（Comment Node）</strong>：对应于文档中的注释，如<code>&lt;!-- 这是一个注释 --&gt;</code>。</li><li><strong>文档节点（Document Node）</strong>：是 DOM树的根节点，代表整个文档。在 JavaScript 中，可以通过<code>document</code> 对象来访问文档节点。</li></ul></li><li><p><strong>DOM 树（DOM Tree）</strong></p><ul><li><p>DOM将文档表示为一个倒立的树形结构，其中每个节点都是树的一个组成部分。文档节点是树的根节点，其他节点如元素节点、文本节点等通过父子、兄弟等关系相互连接。例如对于以下HTML 结构：</p><p>HTML复制</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>欢迎<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是一个段落。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>其对应的 DOM 树大致如下：</p><p>复制</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">document├── html│   ├── head│   │   └── title│   │       └── 文本节点（标题）│   └── body│       ├── h1│       │   └── 文本节点（欢迎）│       └── p│           └── 文本节点（这是一个段落。）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></li></ul></li></ul><h2 id="dom-的操作">DOM 的操作</h2><ul><li><p><strong>访问元素</strong></p><ul><li><strong>通过 ID获取元素</strong>：<code>document.getElementById('elementId')</code>，返回具有指定ID 的元素。</li><li><strong>通过类名获取元素</strong>：<code>document.getElementsByClassName('className')</code>，返回一个包含所有具有指定类名的元素的HTMLCollection 对象。</li><li><strong>通过标签名获取元素</strong>：<code>document.getElementsByTagName('tagName')</code>，返回一个包含所有具有指定标签名的元素的HTMLCollection 对象。</li><li><strong>通过选择器获取元素</strong>：<code>document.querySelector('.className')</code>或 <code>document.querySelector('#elementId')</code>等，返回文档中匹配指定选择器的第一个元素；<code>document.querySelectorAll('.className')</code>等，返回一个包含所有匹配指定选择器的元素的 NodeList 对象。</li></ul></li><li><p><strong>创建元素</strong></p><ul><li><code>document.createElement('tagName')</code>：创建一个指定标签名的新元素。</li><li><code>document.createTextNode('text')</code>：创建一个包含指定文本的新文本节点。</li></ul></li><li><p><strong>插入元素</strong></p><ul><li><code>element.appendChild(child)</code>：将一个子元素添加到指定元素的末尾。</li><li><code>element.insertBefore(newElement, referenceElement)</code>：将新元素插入到指定元素的referenceElement 子元素之前。</li></ul></li><li><p><strong>删除元素</strong></p><ul><li><code>element.removeChild(child)</code>：从指定元素中删除一个子元素。</li></ul></li><li><p><strong>修改元素</strong></p><ul><li><p>修改元素的属性：<code>element.setAttribute('attributeName', 'value')</code>。</p></li><li><p>修改元素属性：<code>element.className = '其他CSS选择器'</code>，覆盖原有属性类名</p><ul><li>可以使用<code>classlist</code>操纵CSS<ul><li><code>element.classlist.add('其他CSS选择器')</code>：追加</li><li><code>element.classlist.remove('其他CSS选择器')</code>：删除</li><li><code>element.classlist。toggle('其他CSS选择器')</code>：切换，如果有这个属性，就删除，反之，则添加</li></ul></li></ul></li><li><p>修改元素的内容：<code>element.innerHTML = '新的内容'</code> 或<code>element.textContent = '新的内容'</code>。</p><ul><li><p><code>innerHTML</code> 属性用于获取或设置元素的 HTML内容，它会解析内容中的 HTML标签。当使用这个属性输出DOM对象的内容是，会将HTML标签也进行输出</p></li><li><p>与<code>innerHTML</code>属性不同，<code>innerText</code>属性用于获取或设置元素的文本内容，它不会解析内容中的HTML 标签。</p><p><img src="/2025/01/17/JavaScript%E4%B8%8EWebAPI%E5%9F%BA%E7%A1%80/DOM/image-20250117214554142.png" alt="image-20250117214554142" style="zoom:50%;"></p></li></ul></li></ul></li><li><p><strong>自定义属性</strong></p><ul><li><p>在HTML标签中使用”data-”作为开头，同时使用dataset获取自定义属性，获取到的是一个字典。</p><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"X-UA-Compatible"</span> content<span class="token operator">=</span><span class="token string">"IE=edge"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>   <span class="token operator">&lt;</span>div data<span class="token operator">-</span>id<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">></span> 自定义属性 <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token comment">// 1. 获取元素</span>        <span class="token keyword">let</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>        <span class="token comment">// 2. 获取自定义属性值</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>id<span class="token punctuation">)</span>          <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></li></ul></li><li><p><strong>事件处理</strong></p><ul><li><p><strong>添加事件监听器</strong>：<code>element.addEventListener(eventclass, function,yesOrno)</code>，为元素添加一个事件监听器，当指定事件发生时，执行回调函数。</p><ul><li><code>eventclass</code>：事件类型</li><li><code>function</code>：要执行的函数</li><li><code>yesOrno</code>：是否进行捕获，默认为true</li></ul></li><li><p><strong>移除事件监听器</strong>：<code>element.removeEventListener('eventName', function)</code>，移除元素上之前添加的事件监听器。</p></li><li><p>事件类型</p><ul><li>鼠标事件<ul><li><code>mouseenter</code>：鼠标是否移入该DOM对象</li><li><code>mouseleave</code>：鼠标是否移出该DOM对象</li><li><code>click</code>：鼠标单击</li><li><code>dbclick</code>：鼠标双击</li></ul></li><li>键盘事件<ul><li><code>keydown</code>：键盘按下</li><li><code>keyup</code>：键盘抬起</li></ul></li><li>表单事件<ul><li><code>input</code>：文本框输入</li></ul></li><li>焦点事件<ul><li><code>focus</code>：获得焦点</li><li><code>blur</code>：失去焦点</li></ul></li></ul></li><li><p>任意事件类型被触发时与事件相关的信息会被以对象的形式记录下来，我们称这个对象为事件对象。事件回调函数的【第1个参数】即所谓的事件对象，通常习惯性的将这个对象命名为<code>event</code>、<code>ev</code> 、<code>ev</code> 。</p></li><li><p>这个对象包含的属性</p><ol type="1"><li><code>ev.type</code> 当前事件的类型</li><li><code>ev.clientX/Y</code> 光标相对浏览器窗口的位置</li><li><code>ev.offsetX/Y</code> 光标相于当前 DOM 元素的位置</li></ol></li></ul></li></ul><h2 id="dom-的应用">DOM 的应用</h2><ul><li><strong>页面交互</strong>：通过 DOM操作，可以实现各种页面交互效果，如点击按钮显示隐藏内容、输入框内容验证、拖拽元素等。</li><li><strong>动态内容更新</strong>：根据用户操作或数据变化，动态地创建、修改或删除页面元素，从而更新页面内容，无需重新加载整个页面。</li><li><strong>与 CSS 交互</strong>：可以使用 DOM来获取或修改元素的样式，实现动态的样式效果，如改变元素的颜色、大小、位置等。</li><li><strong>数据可视化</strong>：结合数据和 DOM操作，可以生成各种图表、图形等数据可视化内容，为用户提供更直观的信息展示。</li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript与Web API</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>输入和输出</title>
    <link href="/2025/01/17/JavaScript%E4%B8%8EWebAPI%E5%9F%BA%E7%A1%80/%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA/"/>
    <url>/2025/01/17/JavaScript%E4%B8%8EWebAPI%E5%9F%BA%E7%A1%80/%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="一输出">一、输出</h1><h2 id="向html文件中输出">1、向HTML文件中输出</h2><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;b>你是谁&lt;/b>"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p><img src="/2025/01/17/JavaScript%E4%B8%8EWebAPI%E5%9F%BA%E7%A1%80/%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA/image-20250117211837568.png" alt="image-20250117211837568" style="zoom:50%;"></p><ul><li>可以向HTML中添加文字，也可以添加标签</li></ul><h2 id="通过页面弹窗输出">2、通过页面弹窗输出</h2><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">alert（<span class="token string">"我警告你"</span>）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="/2025/01/17/JavaScript%E4%B8%8EWebAPI%E5%9F%BA%E7%A1%80/%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA/image-20250117212103297.png" alt="image-20250117212103297" style="zoom:50%;"></p><ul><li>一进页面先执行页面弹窗输出，再执行后续代码</li></ul><h2 id="通过控制台进行输出">3、通过控制台进行输出</h2><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"这是一次输出"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="/2025/01/17/JavaScript%E4%B8%8EWebAPI%E5%9F%BA%E7%A1%80/%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA/image-20250117212350587.png" alt="image-20250117212350587" style="zoom:50%;"></p><h1 id="二输入">二、输入</h1><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"提示你进行输入"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="/2025/01/17/JavaScript%E4%B8%8EWebAPI%E5%9F%BA%E7%A1%80/%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA/image-20250117212610429.png" alt="image-20250117212610429" style="zoom:50%;"></p><ul><li>弹出窗口的先执行，多个弹出窗口的代码，根据编写顺序进行执行</li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript与Web API</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>函数</title>
    <link href="/2025/01/17/JavaScript%E4%B8%8EWebAPI%E5%9F%BA%E7%A1%80/%E5%87%BD%E6%95%B0/"/>
    <url>/2025/01/17/JavaScript%E4%B8%8EWebAPI%E5%9F%BA%E7%A1%80/%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="一什么是函数">一、什么是函数</h1><blockquote><p>在JavaScript 使用关键字 <strong>function</strong>定义函数。不同于其他编程语言中的函数定义，在Javascript中函数描述为一个对象更为准确，JavaScript函数有对象和方法，而且函数定义方法多样。</p></blockquote><h1 id="二函数分类">二、函数分类</h1><h2 id="基本函数">1、基本函数</h2><h3 id="语法">1、语法</h3><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span><span class="token parameter">形参<span class="token number">1</span>，形参<span class="token number">2</span>，……</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//函数体</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="特点">2、特点</h3><ul><li>可以在函数被声明前被调用</li><li>函数名整个作用域都有效</li></ul><h2 id="匿名函数">2、匿名函数</h2><h3 id="语法-1">1、语法</h3><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">形参<span class="token number">1</span>，形参<span class="token number">2</span>，……</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//函数体</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="特点-1">2、特点</h3><ul><li>由于没有函数名，不能在函数外部被调用。</li></ul><h2 id="箭头函数">3、箭头函数</h2><h3 id="语法-2">1、语法</h3><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">functionName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">parameters</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 函数体</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="特点-2">2、特点</h3><ul><li>没有自己的 this，this的值来源于外围最近一层非箭头函数的上下文。</li><li>不绑定 arguments 对象，只能使用 rest 参数代替。</li><li>不能用作构造函数，即不能使用 new 关键字调用。</li><li>简化了函数的写法，如果函数体只有一条语句，可以省略花括号，并且该语句的返回值自动成为函数的返回值。例如<code>const double = x =&gt; x * 2;</code></li></ul><h2 id="方法定义">4、方法定义</h2><h3 id="语法-3">1、语法</h3><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Kimi'</span><span class="token punctuation">,</span>    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="特点-3">2、特点</h3><ul><li>主要用于对象的方法定义，使代码更加简洁易读。</li><li>方法内部的 this 指向该对象。</li></ul><h2 id="立即执行函数">5、立即执行函数</h2><h3 id="语法-4">1、语法</h3><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">形参<span class="token number">1</span>，形参<span class="token number">2</span>，……</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//函数体</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>实参<span class="token number">1</span>，实参<span class="token number">2</span>，……<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="特点-4">2、特点</h3><ul><li>文件一保存就执行这个代码</li><li>用于创建一个封闭的作用域，避免变量污染全局作用域。</li></ul><h2 id="回调函数">6、回调函数</h2><h3 id="语法-5">1、语法</h3><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">callbackFunction</span><span class="token punctuation">(</span><span class="token parameter">parameters</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 函数体</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">mainFunction</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 执行一些操作</span>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">mainFunction</span><span class="token punctuation">(</span>callbackFunction<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="示例">2、示例</h3><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求成功，数据：'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求失败，错误：'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> successCallback<span class="token punctuation">,</span> errorCallback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 模拟异步请求</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token string">'请求到的数据'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">successCallback</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">errorCallback</span><span class="token punctuation">(</span><span class="token string">'请求失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token string">'https://example.com/data'</span><span class="token punctuation">,</span> onSuccess<span class="token punctuation">,</span> onError<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="特点-5">3、特点</h3><ul><li>作为参数传递给另一个函数，并在该函数内部被调用。</li><li>常用于处理异步操作，如事件处理、异步请求等。</li><li>如果回调函数执行不当，可能会导致回调地狱（CallbackHell），使代码难以维护。</li></ul><h2 id="间歇函数">7、间歇函数</h2><h3 id="语法-6">1、语法</h3><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">,</span> delay<span class="token punctuation">,</span> <span class="token punctuation">[</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ul><li><strong>function</strong>：要周期性执行的函数。</li><li><strong>delay</strong>：每次执行之间的时间间隔，以毫秒为单位。</li><li><strong>arg1, arg2,...</strong>：可选参数，这些参数会传递给要执行的函数。</li></ul><h3 id="示例-1">2、示例</h3><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">const</span> intervalId <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    count<span class="token operator">++</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'计数器的值：'</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">clearInterval</span><span class="token punctuation">(</span>intervalId<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 当计数器的值达到 5 时停止执行</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript与Web API</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Fluid主题美化</title>
    <link href="/2025/01/17/Hexo%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/Fluid%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"/>
    <url>/2025/01/17/Hexo%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/Fluid%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="一美化原理">一、美化原理</h2><ul><li>自定义美化的实现是借助Hexo的注入器功能实现的。我们可以在指定位置注入HTML代码，实现元素的增加和Javascript脚本的引入和执行。同时Fluid支持引入自定义JS和CSS文件。这样就可以将自定义的JS文件和CSS文件引入最终渲染的HTML页面中。</li><li>注入器文件：在主题目录下的script文件夹中新建JavaScript文件，写入自己的代码。在注入器中加入希望注入的代码块，建议将JS脚本注入到<code>body_end</code>部分，同时对照开发者工具中的HTML代码选择适当的注入位置。注入器中的JS文件会自动添加到王爷资源中，因此，不需要在<code>_config.fluid.yml</code>中的<code>custom_js</code>中进行重复引入。<strong>注意：这里的JS和CSS文件必须在主题目录下的source文件夹中对应的js和css文件夹中进行创建。</strong></li><li>JS文件在注入器文件中进行引入。</li><li>CSS文件在主题配置文件中的custom_css属性中进行引入，也可以在注入器进行注入。</li></ul><h2 id="二全屏背景">二、全屏背景</h2><h3 id="在themesfluidscripts目录下创建injector.js文件">1、在themes/fluid/scripts目录下创建injector.js文件</h3><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 全屏背景的需要导入这些js</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">root</span><span class="token operator">:</span> siteRoot <span class="token operator">=</span> <span class="token string">"/themes/fluid/source/"</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> hexo<span class="token punctuation">.</span>config<span class="token punctuation">;</span>hexo<span class="token punctuation">.</span>extend<span class="token punctuation">.</span>injector<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">"body_begin"</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div id="web_bg">&lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>hexo<span class="token punctuation">.</span>extend<span class="token punctuation">.</span>injector<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>  <span class="token string">"body_end"</span><span class="token punctuation">,</span>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;script src="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>siteRoot<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">js/backgroundize.js">&lt;/script>  &lt;link defer rel="stylesheet" href="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>siteRoot<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">css/backgroundize.css" />  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="在themesfluidsourcejs目录下创建backgroundize.js文件">2、在themes/fluid/source/js目录下创建backgroundize.js文件</h3><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> bannerContainer <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#banner"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> viewBg <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#web_bg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> bannerMask <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#banner .mask"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> bg <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>bannerContainer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background-image"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span>viewBg<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background-image"</span><span class="token punctuation">,</span> bg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span>bannerContainer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background-image"</span><span class="token punctuation">,</span> <span class="token string">"url()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> color <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>bannerMask<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background-color"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span>bannerMask<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background-color"</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">rgba(0,0,0,0)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span>viewBg<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background-color"</span><span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="在themesfluidsourcecss目录下创建backgroundize.css文件">3、在themes/fluid/source/css目录下创建backgroundize.css文件</h3><figure><div class="code-wrapper"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#web_bg</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> -999<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">background-attachment</span><span class="token punctuation">:</span> local<span class="token punctuation">;</span>    <span class="token property">background-position</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">-webkit-background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>    <span class="token property">-moz-background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>    <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>    <span class="token property">background-repeat</span><span class="token punctuation">:</span> repeat<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="实现效果展示">4、实现效果展示</h3><p><img src="/2025/01/17/Hexo%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/Fluid%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/9fb075e0-d4ac-11ef-9e27-ed07173515f7.png" style="zoom:50%;"></p><h2 id="三injector.js文件注入">三、injector.js文件注入</h2><p>同理，其他的JS和CSS文件都在themes/fluid/source/下的js和css文件夹下进行创建，同样在injector.js文件中进行注入<figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">root</span><span class="token operator">:</span> siteRoot <span class="token operator">=</span> <span class="token string">"/"</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> hexo<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token comment">// 注入背景图div</span>hexo<span class="token punctuation">.</span>extend<span class="token punctuation">.</span>injector<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">"body_begin"</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div id="web_bg">&lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 注入js文件</span><span class="token keyword">const</span> jsFiles <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token string">"backgroundize.js"</span><span class="token punctuation">,</span>  <span class="token string">"snow.js"</span><span class="token punctuation">,</span>  <span class="token string">"title.js"</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span>jsFiles<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">file</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  hexo<span class="token punctuation">.</span>extend<span class="token punctuation">.</span>injector<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">"body_end"</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;script src="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>siteRoot<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">js/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>file<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">">&lt;/script></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 注入css文件</span><span class="token keyword">const</span> cssFiles <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token string">"backgroundize.css"</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span>cssFiles<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">file</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  hexo<span class="token punctuation">.</span>extend<span class="token punctuation">.</span>injector<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">"head_end"</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;link rel="stylesheet" href="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>siteRoot<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">css/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>file<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure> ## 四、其他美化 <figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">custom_js</span><span class="token punctuation">:</span><span class="token comment"># - //cdn.jsdelivr.net/gh/EmoryHuang/BlogBeautify@1.1/DynamicRibbon.min.js # 动态彩带</span><span class="token comment"># - //cdn.jsdelivr.net/gh/EmoryHuang/BlogBeautify@1.1/runtime.min.js # 运行时间</span><span class="token comment"># # # - //cdn.jsdelivr.net/gh/EmoryHuang/BlogBeautify@1.1/Ribbon.min.js # 静态彩带</span><span class="token comment"># - //cdn.jsdelivr.net/gh/EmoryHuang/BlogBeautify@1.1/DynamicLine.min.js # 动态黑色线条</span><span class="token comment"># - //cdn.jsdelivr.net/gh/EmoryHuang/BlogBeautify@1.1/snowflake.min.js # 小雪花飘落</span><span class="token comment"># # # - //cdn.jsdelivr.net/gh/EmoryHuang/BlogBeautify@1.1/Cherry.min.js #樱花飘落</span><span class="token punctuation">-</span> //cdn.jsdelivr.net/gh/EmoryHuang/BlogBeautify@1.1/star.min.js <span class="token comment"># 鼠标跟随小星星</span><span class="token punctuation">-</span> //cdn.jsdelivr.net/gh/EmoryHuang/BlogBeautify@1.1/containsWord.min.js <span class="token comment"># 鼠标点击出字</span><span class="token comment"># # # - //cdn.jsdelivr.net/gh/EmoryHuang/BlogBeautify@1.1/love.min.js #鼠标点击出爱心</span><span class="token key atrule">custom_css</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> //cdn.jsdelivr.net/gh/EmoryHuang/BlogBeautify@1.1/shubiao.css <span class="token comment">#鼠标指针</span>  <span class="token punctuation">-</span> //cdn.jsdelivr.net/gh/EmoryHuang/BlogBeautify@1.1/scroll.css <span class="token comment"># 滚动条颜色</span>  <span class="token punctuation">-</span> //cdn.jsdelivr.net/gh/EmoryHuang/BlogBeautify@1.1/gradient.css <span class="token comment"># 头部打字机颜色效果渐变</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure> ## 五、参考网站</p><ul><li><a href="https://blog.kevinchu.top/2023/07/17/hexo-theme-fluid-modify/">Hexo博客Fluid主题魔改记录- KEVIN'S BLOG</a></li><li><a href="https://emoryhuang.cn/blog/1729600336.html">Hexo + Fluid美化 | EmoryHuang's Blog</a></li><li><a href="https://mrna16.github.io/2024/11/14/%E3%80%90Hexo%E3%80%91Fluid%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/#%E5%85%A8%E5%B1%8F%E8%83%8C%E6%99%AF">【Hexo】Fluid主题美化- mRNA的碎碎念Blog</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Fluid主题配置</title>
    <link href="/2025/01/16/Hexo%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/Fluid%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
    <url>/2025/01/16/Hexo%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/Fluid%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<blockquote><p><strong>名词解析</strong></p><ul><li>站点配置：Hexo 博客目录下的 <code>_config.yml</code></li><li>主题配置：指的是 <code>Hexo/theme/fluid/_config.yml</code> 或者<code>_config.fluid.yml</code></li></ul></blockquote><h1 id="一全局配置">一、全局配置</h1><h2 id="覆盖配置">1、覆盖配置</h2><p>在博客目录下创建一个<code>_config.fluid.yml</code> 文件，同时将主题的<code>_config.yml</code>全部配置（或部分配置）复制过去。</p><p>注意：只要存在于 <code>_config.fluid.yml</code>的配置都是高优先级，修改原 <code>_config.yml</code> 是无效的。</p><h2 id="页面背景设置">2、页面背景设置</h2><p>在<code>主题配置</code>中<code>banner_img</code>属性中进行设置，图片资源存放在<code>Hexo/theme/fluid/source/img</code>文件夹中。</p><blockquote><p><strong>注意</strong></p><p>在主题配置中每个页面都存在一个<code>banner_img</code>属性，记住要修改哪个页面的背景图。</p></blockquote><h2 id="配置博客标题">3、配置博客标题</h2><p>在主题配置中的<code>blog_title</code>属性中进行修改，对应网页上的位置在左上角。</p><p><img src="/2025/01/16/Hexo%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/Fluid%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/image-20250116220823841.png" alt="image-20250116220823841" style="zoom:50%;"></p><h2 id="导航菜单">4、导航菜单</h2><p>在主题配置的<code>menu</code>属性中进行设置，</p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">navbar</span><span class="token punctuation">:</span>  <span class="token key atrule">menu</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token punctuation">&#123;</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span> <span class="token key atrule">link</span><span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token key atrule">icon</span><span class="token punctuation">:</span> <span class="token string">'iconfont icon-home-fill'</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">-</span> <span class="token punctuation">&#123;</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> <span class="token string">'tag'</span><span class="token punctuation">,</span> <span class="token key atrule">link</span><span class="token punctuation">:</span> <span class="token string">'/tags/'</span><span class="token punctuation">,</span> <span class="token key atrule">icon</span><span class="token punctuation">:</span> <span class="token string">'iconfont icon-tags-fill'</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">-</span> <span class="token punctuation">&#123;</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> <span class="token string">'about'</span><span class="token punctuation">,</span> <span class="token key atrule">link</span><span class="token punctuation">:</span> <span class="token string">'/about/'</span><span class="token punctuation">,</span> <span class="token key atrule">icon</span><span class="token punctuation">:</span> <span class="token string">'iconfont icon-user-fill'</span><span class="token punctuation">,</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">'联系我'</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li>key:用于关联有语言配置，如不存在关联则显示 key 本身的值</li><li>link:跳转链接</li><li>icon：图标的<code>css class</code>，可以省略，可以不填</li><li>name：强制使用此名称显示（不再按语言配置显示），可省略</li></ul><p>导航栏二级菜单</p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token punctuation">&#123;</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> <span class="token string">"home"</span><span class="token punctuation">,</span> <span class="token key atrule">link</span><span class="token punctuation">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token key atrule">icon</span><span class="token punctuation">:</span> <span class="token string">"iconfont icon-home-fill"</span> <span class="token punctuation">&#125;</span>  <span class="token punctuation">-</span> <span class="token punctuation">&#123;</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> <span class="token string">"archive"</span><span class="token punctuation">,</span> <span class="token key atrule">link</span><span class="token punctuation">:</span> <span class="token string">"/archives/"</span><span class="token punctuation">,</span> <span class="token key atrule">icon</span><span class="token punctuation">:</span> <span class="token string">"iconfont icon-archive-fill"</span> <span class="token punctuation">&#125;</span>  <span class="token punctuation">-</span> <span class="token punctuation">&#123;</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> <span class="token string">"category"</span><span class="token punctuation">,</span> <span class="token key atrule">link</span><span class="token punctuation">:</span> <span class="token string">"/categories/"</span><span class="token punctuation">,</span> <span class="token key atrule">icon</span><span class="token punctuation">:</span> <span class="token string">"iconfont icon-category-fill"</span> <span class="token punctuation">&#125;</span>  <span class="token punctuation">-</span> <span class="token punctuation">&#123;</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> <span class="token string">"tag"</span><span class="token punctuation">,</span> <span class="token key atrule">link</span><span class="token punctuation">:</span> <span class="token string">"/tags/"</span><span class="token punctuation">,</span> <span class="token key atrule">icon</span><span class="token punctuation">:</span> <span class="token string">"iconfont icon-tags-fill"</span> <span class="token punctuation">&#125;</span>  <span class="token punctuation">-</span> <span class="token punctuation">&#123;</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">,</span> <span class="token key atrule">link</span><span class="token punctuation">:</span> <span class="token string">"/about/"</span><span class="token punctuation">,</span> <span class="token key atrule">icon</span><span class="token punctuation">:</span> <span class="token string">"iconfont icon-user-fill"</span><span class="token punctuation">,</span> <span class="token key atrule">submenu</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span><span class="token key atrule">key</span><span class="token punctuation">:</span> <span class="token string">"理想"</span><span class="token punctuation">,</span> <span class="token key atrule">link</span><span class="token punctuation">:</span> <span class="token string">"/"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token key atrule">key</span><span class="token punctuation">:</span> <span class="token string">"现实"</span><span class="token punctuation">,</span><span class="token key atrule">link</span><span class="token punctuation">:</span> <span class="token string">"/"</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token comment">#二级菜单</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><img src="/2025/01/16/Hexo%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/Fluid%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/image-20250116221718664.png" alt="image-20250116221718664" style="zoom:50%;"></p><h1 id="二文章页配置">二、文章页配置</h1><h2 id="文章页顶部大图">1、文章页顶部大图</h2><p>设置指定文章的顶部大图，则在该文章的yml语言块中添加<code>banner_img</code>属性，值为图片地址。</p><p>注意：图片地址必须在source文件夹下，存放路径为<code>/source/img/example.jpg</code>(目录可以自定义，但必须在source目录下，可以存在多级目录，不可以再_posts文件夹下)</p><blockquote><p>默认效果修改：在主题配置中的<code>post.banner_img</code>属性中进行修改</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> Fluid主题配置<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2025-01-16 21:05:45</span><span class="token key atrule">category</span><span class="token punctuation">:</span><span class="token key atrule">banner_img</span><span class="token punctuation">:</span> /img/image<span class="token punctuation">-</span>20250116220823841.pngtags<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>配置效果如下：</p><p><img src="/2025/01/16/Hexo%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/Fluid%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/image-20250116223538262.png" alt="image-20250116223538262" style="zoom:50%;"></p><h2 id="文章封面">2、文章封面</h2><p>在该文章的yml语言块中添加<code>index_img</code>属性，图片存放地址同上</p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> Fluid主题配置<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2025-01-16 21:05:45</span><span class="token key atrule">category</span><span class="token punctuation">:</span> Hexo<span class="token key atrule">tags</span><span class="token punctuation">:</span><span class="token key atrule">index_img</span><span class="token punctuation">:</span> /img/封面.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>默认效果修改：在主题配置中的<code>default_index_img</code>属性中进行修改</p></blockquote><p>效果展示：</p><p><img src="/2025/01/16/Hexo%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/Fluid%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/image-20250117110748956.png" alt="image-20250117110748956" style="zoom:50%;"></p><h2 id="tag插件">3、Tag插件</h2><p>该主题支持添加文章内的标签</p><h3 id="便签">1. 便签</h3><ul><li>markdown语法使用（前面可以存在缩进）</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% note success %&#125;文字 或者 <span class="token code-snippet code keyword">`markdown`</span> 均可&#123;% endnote %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><div class="note note-success">            <p>文字 或者 <code>markdown</code> 均可</p>          </div><ul><li>HTML语法使用</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>note note-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>//注意标签所在行不能存在缩进<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>便签示例：</p><p class="note note-primary">这是一个无意义的标签</p><ul><li>可用便签<ul><li>primary</li><li>secondary</li><li>success</li><li>danger</li><li>warning</li><li>info</li><li>light</li></ul></li></ul><h3 id="行内标签">2. 行内标签</h3><ul><li>markdown语法使用</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% label primary @text %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><span class="label label-primary">无意义标签</span><ul><li>HTML语法使用</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>label label-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>无意义标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><span class="label label-primary">无意义标签</span></p><ul><li>可选标签<ul><li>primary</li><li>default</li><li>info</li><li>success</li><li>warning</li><li>danger</li></ul></li></ul><h3 id="折叠快">3. 折叠快</h3><figure><div class="code-wrapper"><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% fold info @title %&#125;需要折叠的一段内容，支持 markdown&#123;% endfold %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-57aa7659" role="button" aria-expanded="false" aria-controls="collapse-57aa7659">        <div class="fold-arrow">▶</div>测试      </div>      <div class="fold-collapse collapse" id="collapse-57aa7659">        <div class="fold-content">          <p>需要折叠的一段内容，支持 markdown</p>        </div>      </div>    </div>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>npm长时间下载包失败</title>
    <link href="/2025/01/16/Node/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <url>/2025/01/16/Node/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="node.js疑难解决">Node.js疑难解决</h1><h2 id="一npm安装模块报错">一、npm安装模块报错</h2><h3 id="问题描述">1、问题描述：</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">npm error code CERT_HAS_EXPIREDnpm error errno CERT_HAS_EXPIREDnpm error request to https:&#x2F;&#x2F;registry.npm.taobao.org&#x2F;yarn failed, reason: certificate has expirednpm error A complete log of this run can be found in: D:\Software\Nodejs\node_cache\_logs\2025-01-16T06_54_38_642Z-debug-0.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>npm 的证书失效了，它不再支持自签名证书</p><h3 id="解决方案">2、解决方案</h3><h4 id="升级npm">（1）升级npm</h4><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">npm install -g npm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h4 id="清理缓存">（2）清理缓存</h4><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">npm cache clean --force<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h4 id="更换镜像源">（3）更换镜像源</h4><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">npm config set registry https:&#x2F;&#x2F;registry.npmjs.orgnpm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h4 id="将https改成http">（4）将https改成http</h4><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">npm config set registry http:&#x2F;&#x2F;registry.npmjs.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h4 id="取消ssl验证该方法降低网络安全性慎用">（5）取消ssl验证(该方法降低网络安全性，慎用)</h4><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">npm config set strict-ssl false<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Node.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node.js</tag>
      
      <tag>疑难解决</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Conda创建和使用环境</title>
    <link href="/2025/01/16/Conda/Conda%E5%9F%BA%E7%A1%80-1/"/>
    <url>/2025/01/16/Conda/Conda%E5%9F%BA%E7%A1%80-1/</url>
    
    <content type="html"><![CDATA[<h1 id="conda基础操作">Conda基础操作</h1><h2 id="conda环境查询">1. conda环境查询</h2><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">conda info<span class="token comment">#当前环境配置查询</span>conda info <span class="token operator">-</span><span class="token operator">-</span>env<span class="token comment">#查询conda安装的所有环境</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="conda创建环境">2. conda创建环境</h2><ol type="1"><li>创建环境</li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">conda create <span class="token operator">-</span>n python313 python<span class="token operator">=</span><span class="token number">3.13</span>  <span class="token comment">#"python313"是我自定义的环境名称，"python=3.13"设置配置环境中python版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ol start="2" type="1"><li>激活并使用所创建的环境</li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">conda activate python313  <span class="token comment">#“python313”是所要使用环境名称</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ol start="3" type="1"><li>删除不需要的环境 <figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">conda remove <span class="token operator">-</span>n python313 <span class="token operator">-</span><span class="token operator">-</span><span class="token builtin">all</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Conda</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境查询</tag>
      
      <tag>环境创建</tag>
      
      <tag>Conda</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分支限界法</title>
    <link href="/2025/01/07/%E7%AE%97%E6%B3%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AE%97%E6%B3%95-6/"/>
    <url>/2025/01/07/%E7%AE%97%E6%B3%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AE%97%E6%B3%95-6/</url>
    
    <content type="html"><![CDATA[<h1 id="分支限界法">分支限界法</h1><ul><li>什么是分支限界法？<ul><li>以广度优先或以最小耗费优先的方式搜索解空间树，利用最优解属性的上下界来控制搜索的分支，找出满足约束条件的一个解，或是在满足约束条件的解中找出在某种意义下的最优解。也是以树形结构（子集树或排列树）来组织解空间</li><li>分支限界的解空间比回溯法要大得多。内存有限时，使用回溯法更容易成功</li><li>常规思路：<ul><li>在分支限界法中，每个活结点只有一次机会成为扩展节点。一旦成为扩展结点，就一次性产生其所有儿子结点。在这些儿子节点中，导致不可行解或导致非最优解的儿子结点被舍弃，其余儿子结点被加入活结点表中。此后，从活结点表中取下一节点成为当前扩展结点，并重复上述扩展过程。这个过程一直持续到找到所需解或活结点表为空时为止。</li></ul></li><li>常见的分支限界法：<ul><li>队列式分支限界法（FIFO）：按照队列先进先出原则选取下一个节点作为扩展节点</li><li>优先队列式分支限界法：按照优先队列中规定的优先级选取优先级最高的节点成为当前扩展结点。该方法最大收益、最小损耗</li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分支限界法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>回溯法</title>
    <link href="/2025/01/07/%E7%AE%97%E6%B3%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AE%97%E6%B3%95-5/"/>
    <url>/2025/01/07/%E7%AE%97%E6%B3%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AE%97%E6%B3%95-5/</url>
    
    <content type="html"><![CDATA[<h1 id="回溯法">回溯法</h1><ul><li><p>什么是回溯法？</p><ul><li><p>常用于对候选解进行系统检查的方法</p><ul><li>回溯和分支限定（定界）</li></ul></li><li><p>常规思路：</p><ul><li>列出所有候选解</li><li>依次检查每一个解，直到找到所需的解</li><li>避免无效的搜索：<ul><li>剪枝函数：<ul><li>约束函数：在扩展结点（当前正在搜索的节点）处剪去不满足约束条件的子树</li><li>限界函数：剪去不能得到最优解的子树</li></ul></li></ul></li></ul></li><li><p>可行性前提：</p><ul><li>候选解的数量有限</li><li>能够通过检查所有或部分候选解得到所需的解</li></ul></li><li><p>回溯法中的两种常见解空间树：</p><ul><li>子集树：当所给的问题是从n个元素组成的集合S中找出满足某种性质的一个子集时，相应的解空间树称为子集树。典型案例，0-1背包问题<ul><li>当所给的问题是从n个元素的集合S中找出满足某种性质的子集时，相应的解空间树为子集树。这类子集树常有<span class="math inline">\(2^n\)</span>个叶结点，其结点个数为<span class="math inline">\(2^{n+1}-1\)</span>。遍历子集树的任何算法均需<span class="math inline">\(Ω(2^n)\)</span>的计算时间。（如背包问题）</li></ul></li><li>排列树：当所给的问题是从n个元素的排列中找出某种性质的一个排列时，相应的解空间树称为排列树。典型案例：n后问题<ul><li>当所给问题是确定n个元素的满足某种性质的排列时，相应的解空间树为排列树。排列树通常有n!个叶结点。因此遍历排列树所需的计算时间需要Ω(n!)的计算时间。（如TSP问题）</li></ul></li></ul><p><img src="/2025/01/07/%E7%AE%97%E6%B3%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AE%97%E6%B3%95-5/image-20250107154328455.png" alt="image-20250107154328455" style="zoom:67%;"></p></li></ul></li></ul><blockquote><p>回溯法的基本做法是在问题的解空间中，按照深度优先策略，从根节点出发搜索解空间树。当算法搜索到解空间树的任意节点时，先要判断该节点是否包含问题的解，如果不包含，则跳过以该节点为根的子树的搜索，逐层向其祖先节点会回溯。否则，进入该子树，继续按深度优先策略进行搜索。</p></blockquote><p><em>解空间树：不考虑任何条件，穷举所有情况的树结构，通常是一个满多叉树，但也可能不是，关键在于它列举了所有可能的情况。解空间树的每个节点代表了问题的一个潜在解，而整棵树则代表了所有可能的解的集合。</em></p><p><em>搜索空间树：在解空间树的基础上，通过减枝（剪枝）操作得到的树结构。减枝是一种优化搜索过程的方法，它通过剪去那些不可能产生最优解或满足条件的解的分支，从而减少搜索的范围和复杂度。搜索空间树的每个节点仍然代表问题的一个潜在解，但整棵树只包含了那些经过筛选的、可能是最优解或满足特定条件的解。</em></p><h2 id="迷宫问题">1、迷宫问题</h2><ul><li>描述：给定一个迷宫，指明起点和终点，找出从起点出发到终点的有效可行路径。迷宫可以以二维数组来存储表示。0表示通路，1表示障碍。注意这里规定移动可以从上、下、左、右四方方向移动。</li><li>思考：回溯法是根据深度优先的策略进行分析问题的，通俗来说就是，一条路走到死才会回头。为了保证在任何位置上都能沿原路退回，显然需要用一个后进先出的结构来保存从入口到当前位置的路径。因此在求解迷宫通路的算法中需要应用“栈”。<ul><li>首先判断起点和终点是否合法，如果合法则将起点坐标压入栈中，并执行下面的步骤；如果不合法，直接返回，不执行下面的步骤。</li><li>接着，取出栈顶元素，找到该元素可以直接访问的其他坐标中的一个，也就是相邻元素，将其压入栈中，并标记为已访问。如果没有相邻未访问元素，则进行回溯，即取出下一个栈顶元素</li><li>重复上一步，知道栈空或者栈顶元素等于终点。</li></ul></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">is_safe</span><span class="token punctuation">(</span>maze<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""检查当前位置是否安全（即是否在迷宫范围内且不是障碍物）"""</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> x <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>maze<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> y <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>maze<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">and</span> maze<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">solve_maze</span><span class="token punctuation">(</span>maze<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""解决迷宫问题的主函数"""</span>    solution <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>maze<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>maze<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> solve_maze_util<span class="token punctuation">(</span>maze<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> solution<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没有解决方案"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    print_solution<span class="token punctuation">(</span>solution<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">def</span> <span class="token function">solve_maze_util</span><span class="token punctuation">(</span>maze<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> solution<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""使用回溯法解决迷宫问题的辅助函数"""</span>    <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>maze<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token keyword">and</span> y <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>maze<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>        solution<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">if</span> is_safe<span class="token punctuation">(</span>maze<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        solution<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">if</span> solve_maze_util<span class="token punctuation">(</span>maze<span class="token punctuation">,</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> solution<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>         <span class="token keyword">if</span> solve_maze_util<span class="token punctuation">(</span>maze<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> solution<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        solution<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">print_solution</span><span class="token punctuation">(</span>solution<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""打印迷宫的解决方案"""</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> solution<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>cell<span class="token punctuation">)</span> <span class="token keyword">for</span> cell <span class="token keyword">in</span> row<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    maze <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token punctuation">]</span>        solve_maze<span class="token punctuation">(</span>maze<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="n后问题">2、n后问题</h2><ul><li><p>描述：在n行n列的国际象棋棋盘上，若两个皇后位于同一行、同一列、同一对角线上，则称它们为互相攻击。找到这n个皇后互不攻击的布局。</p></li><li><p>思考：每个皇后不能再同一列，也就是每个皇后占据一行，根据这个建立解空间树，剪枝条件，两个皇后不能再同一列、同一对角线</p><ul><li><p>n后问题是一个经典的组合优化问题，目标是在 $ n n $ 的棋盘上放置 $n $个皇后，使得它们互不攻击，即任何两个皇后都不在同一行、同一列或同一斜线上。回溯法是解决n后问题的一种有效方法，其基本思想是通过递归地尝试每一种可能的放置方案，直到找到所有可行解或确定无解.</p><ol type="1"><li><strong>问题定义</strong>：<ul><li>棋盘为 $ n n $ 的矩阵，用数组表示每一行皇后的列位置.</li><li>目标是找到一种或多种放置方案，使得所有皇后互不攻击.</li></ul></li><li><strong>回溯法的基本思想</strong>：<ul><li>使用递归函数来遍历所有可能的皇后放置方案.</li><li>在每一步中，尝试将皇后放置在当前行的每一列，并检查是否满足约束条件.</li><li>如果当前放置方案满足约束条件，则继续递归处理下一行；否则，回溯到上一步，尝试其他列.</li></ul></li><li><strong>算法步骤</strong>：<ul><li><strong>初始化</strong>：定义一个数组来存储每一行皇后的列位置，定义一个计数器来记录解的数量.</li><li><strong>递归函数</strong>：<ul><li><strong>参数</strong>：当前行号 $ row $.</li><li><strong>递归终止条件</strong>：<ul><li>如果所有行都已放置完毕，说明找到一个可行解，记录解并返回.</li></ul></li><li><strong>递归扩展</strong>：<ul><li>在当前行的每一列尝试放置皇后.</li><li>检查当前放置是否满足约束条件（不在同一列或同一斜线上）.</li><li>如果满足约束条件，则递归处理下一行.</li></ul></li></ul></li><li><strong>剪枝</strong>：在递归过程中，可以通过剪枝减少不必要的计算.例如，如果当前放置方案已经违反约束条件，则可以立即回溯.</li></ul></li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">is_safe</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 检查列是否有冲突</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> col<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token comment"># 检查左上对角线是否有冲突</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> j <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>row<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token punctuation">(</span>col<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> j<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token comment"># 检查右上对角线是否有冲突</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> j <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>row<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token punctuation">(</span>col<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> j<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">def</span> <span class="token function">solve_n_queens</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> row <span class="token operator">==</span> n<span class="token punctuation">:</span>            <span class="token comment"># 找到一个解</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>board<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> is_safe<span class="token punctuation">(</span>board<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>                board<span class="token punctuation">[</span>row<span class="token punctuation">]</span> <span class="token operator">=</span> col                backtrack<span class="token punctuation">(</span>row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>                board<span class="token punctuation">[</span>row<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token comment"># 回溯</span>    board <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> n    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    backtrack<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token comment"># 示例</span>n <span class="token operator">=</span> <span class="token number">4</span>solutions <span class="token operator">=</span> solve_n_queens<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token keyword">for</span> solution <span class="token keyword">in</span> solutions<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution<span class="token punctuation">)</span>        <span class="token keyword">class</span> <span class="token class-name">Queen</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>n <span class="token operator">=</span> n        self<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 当前解</span>        self<span class="token punctuation">.</span><span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 当前已找到的可行方案数</span>    <span class="token keyword">def</span> <span class="token function">place</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>k <span class="token operator">-</span> j<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>x<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>x<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">def</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> t <span class="token operator">></span> self<span class="token punctuation">.</span>n<span class="token punctuation">:</span>            self<span class="token punctuation">.</span><span class="token builtin">sum</span> <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>x<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token comment">#确定第t行的皇后位置为i</span>                <span class="token keyword">if</span> self<span class="token punctuation">.</span>place<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>backtrack<span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">n_queen</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    q <span class="token operator">=</span> Queen<span class="token punctuation">(</span>n<span class="token punctuation">)</span>    q<span class="token punctuation">.</span>backtrack<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> q<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token comment"># 示例使用</span>n <span class="token operator">=</span> <span class="token number">4</span>solutions <span class="token operator">=</span> n_queen<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Number of solutions for </span><span class="token interpolation"><span class="token punctuation">&#123;</span>n<span class="token punctuation">&#125;</span></span><span class="token string">-queens problem: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>solutions<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></li></ul></li></ul><h2 id="简单装载问题">3、简单装载问题</h2><ul><li><p>描述：有n个集装箱要装上一艘载重量为W的轮船,其中集装箱i ( 1≤i≤n)的重量为<span class="math inline">\(w_i\)</span>。不考虑集装箱的体积限制,现要这些集装箱中选出若干装上轮船,使它们的重量之和小于等于W 。</p></li><li><p>思考：简单装载问题是指如何将一组物品装入容量有限的容器中，使得容器中的物品总价值最大或总重量不超过容器的容量。回溯法是一种常用的解决此类问题的方法，尤其适用于求解组合优化问题。</p><ol type="1"><li><strong>问题定义</strong>：<ul><li>假设有 $ n $ 个物品，每个物品有一个重量 <span class="math inline">\(w_i\)</span> 和一个价值<span class="math inline">\(v_i\)</span> 。</li><li>容器的容量为 $ C $。</li><li>目标是选择一些物品放入容器中，使得总重量不超过 $ C $且总价值最大.</li></ul></li><li><strong>回溯法的基本思想</strong>：<ul><li>回溯法通过递归地构建解空间树来寻找最优解。</li><li>解空间树的每个节点代表一个部分解，即当前选择的物品集合.</li><li>从根节点开始，逐步扩展节点，直到找到最优解或确定无解.</li></ul></li><li><strong>算法步骤</strong>：<ul><li><strong>初始化</strong>：定义一个全局变量来存储当前找到的最大价值.</li><li><strong>递归函数</strong>：<ul><li><strong>参数</strong>：当前考虑的物品索引 $ i $，当前总重量 $currentWeight $，当前总价值 $ currentValue $.</li><li><strong>递归终止条件</strong>：<ul><li>如果 $ i $超过物品总数，说明已经考虑完所有物品，此时更新最大价值.</li><li>如果 $ currentWeight $ 超过容器容量 $ C$，则当前部分解无效，直接返回.</li></ul></li><li><strong>递归扩展</strong>：<ul><li><strong>不选择当前物品</strong>：递归处理下一个物品 $ i+1$，保持当前重量和价值不变.</li><li><strong>选择当前物品</strong>：如果当前物品的重量加上当前总重量不超过容器容量，则递归处理下一个物品$ i+1 $，更新当前总重量和价值.</li></ul></li></ul></li><li><strong>剪枝</strong>：在递归过程中，可以通过剪枝减少不必要的计算。例如，如果当前部分解加上剩余物品的最大可能价值仍然小于当前已知的最大价值，则可以剪枝.</li></ul></li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">knapsack</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> C<span class="token punctuation">,</span> weights<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">:</span>    max_value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># 全局变量，存储最大价值</span>    <span class="token keyword">def</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> currentWeight<span class="token punctuation">,</span> currentValue<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> n<span class="token punctuation">:</span>            max_value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>max_value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> currentValue<span class="token punctuation">)</span>            <span class="token keyword">return</span>                <span class="token comment"># 不选择当前物品</span>        backtrack<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> currentWeight<span class="token punctuation">,</span> currentValue<span class="token punctuation">)</span>                <span class="token comment"># 选择当前物品</span>        <span class="token keyword">if</span> currentWeight <span class="token operator">+</span> weights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> C<span class="token punctuation">:</span>            backtrack<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> currentWeight <span class="token operator">+</span> weights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> currentValue <span class="token operator">+</span> values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    backtrack<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> max_value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment"># 示例</span>n <span class="token operator">=</span> <span class="token number">4</span>C <span class="token operator">=</span> <span class="token number">7</span>weights <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>knapsack<span class="token punctuation">(</span>n<span class="token punctuation">,</span> C<span class="token punctuation">,</span> weights<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出最大价值</span><span class="token keyword">def</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 搜索第i层结点</span>    <span class="token keyword">global</span> cw<span class="token punctuation">,</span> r<span class="token punctuation">,</span> bestw<span class="token punctuation">,</span> bestx<span class="token punctuation">,</span> x    <span class="token keyword">if</span> i <span class="token operator">></span> n<span class="token punctuation">:</span>  <span class="token comment"># 到达叶结点</span>        <span class="token keyword">if</span> cw <span class="token operator">></span> bestw<span class="token punctuation">:</span>            bestw <span class="token operator">=</span> cw            bestx <span class="token operator">=</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token keyword">return</span>    r <span class="token operator">-=</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">if</span> cw <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> c<span class="token punctuation">:</span>  <span class="token comment"># 搜索左子树</span>        x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        cw <span class="token operator">+=</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        backtrack<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        cw <span class="token operator">-=</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">if</span> cw <span class="token operator">+</span> r <span class="token operator">></span> bestw<span class="token punctuation">:</span>  <span class="token comment"># 搜索右子树、剪枝部分</span>        x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>        backtrack<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    r <span class="token operator">+=</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token comment"># 示例使用</span>n <span class="token operator">=</span> <span class="token number">3</span>  <span class="token comment"># 物品数量</span>w <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>  <span class="token comment"># 物品重量</span>c <span class="token operator">=</span> <span class="token number">50</span>  <span class="token comment"># 容器容量</span>r <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span>  <span class="token comment"># 剩余物品的总重量</span>cw <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 当前容器的总重量</span>bestw <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 当前找到的最大重量</span>bestx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 当前最优解的物品选择状态数组</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 当前解的物品选择状态数组</span>backtrack<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 从第1个物品开始搜索</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"最大装载重量:"</span><span class="token punctuation">,</span> bestw<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"最优装载方案:"</span><span class="token punctuation">,</span> bestx<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出最优解的物品选择状态，忽略第0个元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></li></ul><h2 id="复杂装载问题">4、复杂装载问题</h2><ul><li><p>描述：有一批共n个集装箱要装上2艘载重量分别为<span class="math inline">\(c_1\)</span>和<span class="math inline">\(c_2\)</span>的轮船，其中集装箱i的重量是<span class="math inline">\(w_i\)</span>，且$ _{i=1}^nw_i&lt;=c_1+c_2$，要求找一个合理的装载方案可将集装箱装上这两艘轮船。</p></li><li><p>思考：</p><ul><li><p>当n=3，c1=c2=50 , w={10 , 40 ,40}，将集装箱1和2装到第一艘轮船上,而将集装箱3装到第二艘轮船上。</p></li><li><p>当n=3，c1=c2=50，w={20 , 40 ,40}，则无法将这3个集装箱都装上轮船。</p></li><li><p>首先将第一艘轮船尽可能装满，将剩余的集装箱装上第二艘轮船。将第一艘轮船尽可能装满等价于选取全体集装箱的一个子集，使该子集中集装箱重量之和最接近c1。由此可知，装载问题等价于以下特殊的0-1背包问题。</p></li><li><p>复杂装载问题通常涉及多个容器（如轮船、货车等）和多个物品（如集装箱），目标是将物品合理地分配到各个容器中，以满足一定的约束条件，如容器的容量限制等。回溯法是解决此类问题的一种有效方法，其基本思路是通过递归地构建解空间树来寻找最优解或可行解。</p><h3 id="复杂装载问题的回溯法步骤">复杂装载问题的回溯法步骤</h3><ol type="1"><li><strong>问题定义</strong>：<ul><li>假设有 n 个物品，每个物品有一个重量 $ w_i $。</li><li>有 m 个容器，每个容器有一个容量 <span class="math inline">\(c_j\)</span> 。</li><li>目标是将所有物品分配到这些容器中，使得每个容器的总重量不超过其容量。</li></ul></li><li><strong>回溯法的基本思想</strong>：<ul><li>使用递归函数来遍历所有可能的物品分配方案。</li><li>在每一步中，决定将当前物品放入哪个容器或不放入任何容器。</li><li>使用剪枝技术来减少不必要的计算，提高算法效率。</li></ul></li><li><strong>算法步骤</strong>：<ul><li><strong>初始化</strong>：定义全局变量来存储当前最优解或可行解。</li><li><strong>递归函数</strong>：<ul><li><strong>参数</strong>：当前考虑的物品索引 $ i $，当前容器的重量数组$ currentWeight $，剩余物品的重量和等。</li><li><strong>递归终止条件</strong>：<ul><li>如果所有物品都已分配完毕，检查当前解是否满足所有约束条件，更新最优解或可行解.</li></ul></li><li><strong>递归扩展</strong>：<ul><li><strong>不分配当前物品</strong>：递归处理下一个物品。</li><li><strong>分配当前物品到某个容器</strong>：如果当前物品的重量加上某个容器的当前重量不超过该容器的容量，则将物品放入该容器，并递归处理下一个物品。</li></ul></li></ul></li><li><strong>剪枝</strong>：在递归过程中，可以通过剪枝减少不必要的计算.例如，如果当前部分解加上剩余物品的最大可能重量仍然超过某个容器的容量，则可以剪枝。</li></ul></li></ol><p>假设我们有3个集装箱和2艘轮船，每艘轮船的容量分别为50，集装箱的重量分别为10,40, 40.</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> currentWeight<span class="token punctuation">,</span> remainingWeight<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>boxes<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">all</span><span class="token punctuation">(</span>w <span class="token operator">&lt;=</span> c <span class="token keyword">for</span> w<span class="token punctuation">,</span> c <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>currentWeight<span class="token punctuation">,</span> capacities<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"可行解："</span><span class="token punctuation">,</span> currentWeight<span class="token punctuation">)</span>        <span class="token keyword">return</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>capacities<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> currentWeight<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> boxes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> capacities<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>            currentWeight<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> boxes<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            backtrack<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> currentWeight<span class="token punctuation">,</span> remainingWeight <span class="token operator">-</span> boxes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            currentWeight<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-=</span> boxes<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        backtrack<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> currentWeight<span class="token punctuation">,</span> remainingWeight<span class="token punctuation">)</span><span class="token comment"># 示例</span>boxes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span>capacities <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span>backtrack<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>boxes<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></li></ul></li></ul><h2 id="背包问题">5、0-1背包问题</h2><ul><li><p>描述：有n个物品，它们有各自的重量和价值，现有给定容量的背包，如何让背包里装入的物品具有最大的价值总和？有n种可选物1，…，n，放入容量为c的背包内，背包容量不足以装入所有物品，使装入的物品具有最大效益。</p></li><li><p>思考：0-1背包问题是一个经典的组合优化问题，目标是在不超过背包容量的情况下，从一组物品中选择若干物品放入背包，使得背包中物品的总价值最大。回溯法是一种有效的解决方法，通过递归地尝试每一种可能的物品组合，直到找到最优解.</p><ol type="1"><li><strong>问题定义</strong>：<ul><li>假设有 $ n $ 个物品，每个物品有一个重量 $ w_i $ 和一个价值 $ v_i $.</li><li>背包的容量为 $ C $ .</li><li>目标是选择一些物品放入背包中，使得总重量不超过 $ C $且总价值最大.</li></ul></li><li><strong>回溯法的基本思想</strong>：<ul><li>使用递归函数来遍历所有可能的物品组合.</li><li>在每一步中，决定是否选择当前物品，并检查是否满足约束条件（总重量不超过背包容量）.</li><li>使用剪枝技术来减少不必要的计算，提高算法效率.</li></ul></li><li><strong>算法步骤</strong>：<ul><li><strong>初始化</strong>：定义全局变量来存储当前找到的最大价值和对应的物品选择状态.</li><li><strong>递归函数</strong>：<ul><li><strong>参数</strong>：当前考虑的物品索引 $ i $，当前总重量 $currentWeight $，当前总价值 $ currentValue $ .</li><li><strong>递归终止条件</strong>：<ul><li>如果所有物品都已考虑完毕，更新最大价值和对应的物品选择状态.</li></ul></li><li><strong>递归扩展</strong>：<ul><li><strong>不选择当前物品</strong>：递归处理下一个物品，保持当前重量和价值不变.</li><li><strong>选择当前物品</strong>：如果当前物品的重量加上当前总重量不超过背包容量，则递归处理下一个物品，更新当前总重量和价值.</li></ul></li></ul></li><li><strong>剪枝</strong>：在递归过程中，可以通过剪枝减少不必要的计算.例如，如果当前部分解加上剩余物品的最大可能价值仍然小于当前已知的最大价值，则可以剪枝.</li></ul></li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">knapsack_backtrack</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> C<span class="token punctuation">,</span> weights<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> max_value<span class="token punctuation">,</span> best_solution<span class="token punctuation">,</span> current_solution<span class="token punctuation">,</span> current_weight<span class="token punctuation">,</span> current_value        <span class="token keyword">def</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">global</span> max_value<span class="token punctuation">,</span> best_solution<span class="token punctuation">,</span> current_solution<span class="token punctuation">,</span> current_weight<span class="token punctuation">,</span> current_value        <span class="token keyword">if</span> i <span class="token operator">==</span> n<span class="token punctuation">:</span>            <span class="token keyword">if</span> current_value <span class="token operator">></span> max_value<span class="token punctuation">:</span>                max_value <span class="token operator">=</span> current_value                best_solution <span class="token operator">=</span> current_solution<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>            <span class="token keyword">return</span>                <span class="token comment"># 不选择当前物品</span>        backtrack<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token comment"># 选择当前物品</span>        <span class="token keyword">if</span> current_weight <span class="token operator">+</span> weights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> C<span class="token punctuation">:</span>            current_solution<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>            current_weight <span class="token operator">+=</span> weights<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            current_value <span class="token operator">+=</span> values<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            backtrack<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            current_solution<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            current_weight <span class="token operator">-=</span> weights<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            current_value <span class="token operator">-=</span> values<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        max_value <span class="token operator">=</span> <span class="token number">0</span>    best_solution <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n    current_solution <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n    current_weight <span class="token operator">=</span> <span class="token number">0</span>    current_value <span class="token operator">=</span> <span class="token number">0</span>        backtrack<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> max_value<span class="token punctuation">,</span> best_solution<span class="token comment"># 示例</span>n <span class="token operator">=</span> <span class="token number">4</span>C <span class="token operator">=</span> <span class="token number">7</span>weights <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>max_value<span class="token punctuation">,</span> best_solution <span class="token operator">=</span> knapsack_backtrack<span class="token punctuation">(</span>n<span class="token punctuation">,</span> C<span class="token punctuation">,</span> weights<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"最大价值: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>max_value<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"最优解: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>best_solution<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></li></ul><h2 id="批处理作业调度问题">6、批处理作业调度问题</h2><ul><li>描述：给定n个作业的集合<span class="math inline">\({J_1,J_2,…,J_n}\)</span>。每个作业必须先由机器1处理，然后由机器2处理。作业<span class="math inline">\(J_i\)</span>需要机器j的处理时间为<span class="math inline">\(t_{ji}\)</span>。对于一个确定的作业调度，设Fji是作业i在机器j上完成处理的时间。所有作业在机器2上完成处理的时间和称为该作业调度的完成时间和。批处理作业调度问题要求对于给定的n个作业，制定最佳作业调度方案，使其完成时间和达到最小。</li><li>思考：批处理作业调度是要从n个作业的所有排列中找出有最小完成时间和的作业调度，所以批处理调度问题的解空间是一棵排列树。按照回溯法搜索排列树的算法框架，设开始时x= [1, .., n]是所给的 <strong>n</strong> 个作业，则相应的排列树由所有排列构成。<img src="/2025/01/07/%E7%AE%97%E6%B3%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AE%97%E6%B3%95-5/image-20250107202508939.png" alt="image-20250107202508939" style="zoom:50%;"></li></ul><h2 id="符号三角形问题">7、符号三角形问题</h2><ul><li>描述：由14个“+”和14个“-”组成的符号三角形。2个同号下面都是“+”，2个异号下面都是“-”。符号三角形的第一行有n个符号。符号三角形问题要求对于给定的n，计算有多少个不同的符号三角形，使其所含的“+”和“-”的个数相同。</li><li>思考：不断改变第一行每个符号，搜索符合条件的解，可以使用递归回溯。<ul><li>为了便于运算，设+为0，-为1，这样可以使用异或运算符表示符号三角形的关系。</li><li>因为两种符号个数相同，可以对题解树剪枝，当所有符号总数为奇数时无解，当某种符号超过总数一半时无解。</li><li>当第一行的前 $ i $ 个符号 $ x[1:i] $ 确定后，可以构造一个包含 $i(i+1)/2 $ 个符号的符号三角形.这是因为符号三角形的每一行符号数量依次递增，形成一个等差数列，其前 $ i $行的符号总数为 $ i(i+1)/2 $.</li><li>当确定了 $ x[i+1] $的值后，可以在已确定的符号三角形的右边加一条边，从而拓展为 $ x[1:i+1] $所对应的符号三角形.这一步是回溯法中的递归扩展过程，通过增加一个符号来扩展当前的解空间.</li><li><strong>约束条件</strong>：<ul><li>符号三角形中“+”和“-”的个数必须相等，即都为 $ n(n+1)/4 $.这是因为符号三角形的总符号数为 $ n(n+1)/2$，一半的符号为“+”，另一半为“-”.</li><li>如果 $ n(n+1)/2 $为奇数，则不存在满足条件的符号三角形，因为奇数不能被均匀分成两部分.</li></ul></li></ul></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">Backtrack</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> count<span class="token punctuation">,</span> half<span class="token punctuation">,</span> <span class="token builtin">sum</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> p    <span class="token keyword">if</span> count <span class="token operator">></span> half <span class="token keyword">or</span> <span class="token punctuation">(</span>t <span class="token operator">*</span> <span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span> <span class="token operator">-</span> count<span class="token punctuation">)</span> <span class="token operator">></span> half<span class="token punctuation">:</span>        <span class="token keyword">return</span>    <span class="token keyword">if</span> t <span class="token operator">></span> n<span class="token punctuation">:</span>        <span class="token builtin">sum</span> <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 分别给 0, 1</span>            p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> i            count <span class="token operator">+=</span> i            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 下面每一排数据</span>                p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>t <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>t <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> p<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>t <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span>                count <span class="token operator">+=</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>t <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>            Backtrack<span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                count <span class="token operator">-=</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>t <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>            count <span class="token operator">-=</span> i<span class="token comment"># 初始化全局变量</span>n <span class="token operator">=</span> <span class="token number">4</span>  <span class="token comment"># 例如，n=4</span>half <span class="token operator">=</span> n <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">4</span><span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>count <span class="token operator">=</span> <span class="token number">0</span>p <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment"># 初始化符号三角形数组</span>Backtrack<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Number of valid symbol triangles: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">sum</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>回溯法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>贪心算法</title>
    <link href="/2025/01/04/%E7%AE%97%E6%B3%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AE%97%E6%B3%95-4/"/>
    <url>/2025/01/04/%E7%AE%97%E6%B3%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AE%97%E6%B3%95-4/</url>
    
    <content type="html"><![CDATA[<h1 id="贪心算法">贪心算法</h1><ul><li><p>什么是贪心算法？</p><ul><li>在对问题求解时，总是做出在当前看来是最好的选择，就是贪心。不从整体上最优加以考虑，所做出的仅是在某种意义上的局部最优。</li><li>贪心算法不是对所有问题都能得到整体最优解，但对范围相当广泛的许多问题，它能产生整体最优解或者是整体最优解的近似解。</li><li>特点：多步判断、最优子结构性质、贪心选择性质</li></ul></li><li><p>最优化问题</p><ul><li>每个最优化问题包含一组限制条件和一个优化函数<ul><li>可行解：符合限制条件的问题求解方案</li><li>最优解：使优化函数取得最佳解的可行解</li></ul></li></ul></li><li><p>动态规划 VS 贪心算法</p><ul><li><p>共同点：都要求问题具有最优子结构性质</p></li><li><p>动态规划：自底向上，求解出很多子问题，然后再做出选择</p></li><li><p>贪心算法：自顶向下，第一步为贪心选择，将原问题变成一个相似的、但规模更小的问题，而后每一步都是当前看似最佳的选择。从求解的全过程来看，每一次贪心选择都将当前问题归纳为更小的相似子问题，而每一次选择都仅做一次，无重复回溯过程，具有较高的时间效率。</p><p><img src="/2025/01/04/%E7%AE%97%E6%B3%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AE%97%E6%B3%95-4/image-20250105205422424.png" alt="image-20250105205422424" style="zoom:50%;"></p></li></ul></li></ul><h2 id="范例">1、范例</h2><h3 id="最短路径">1、最短路径</h3><ul><li>描述：寻找初始点到达目标点的最短路径</li><li>思考：每一步在路径中添加一个顶点，假设当前路径中已到达顶点P，且顶点P并不是目标顶点，则选择离P最近且目前不在路径中的点</li></ul><h3 id="渴婴问题">2、渴婴问题</h3><ul><li>描述：婴儿可得到n种不同的饮料。根据以前关于这n种饮料的不同体验，此婴儿知道这其中某些饮料更合自己的胃口，因此，婴儿采取如下方法为每一种饮料赋予一个满意度值：饮用1盎司第i种饮料，对它作出相对评价，将一个数值<span class="math inline">\(s_i\)</span>作为满意度赋予第i种饮料。这个婴儿都会尽量饮用具有最大满意度值的饮料来最大限度地满足她解渴地需要，但是不幸地是：具有最大满意度值地饮料有时并没有足够地量来满足此婴儿解渴地需要。设<span class="math inline">\(a_i\)</span>是第i种饮料地总量，而此婴儿需要t盎司的饮料来解渴，那么，需要饮用n种不同的饮料各多少量才能满足婴儿解渴的需求。</li><li>思考：只考虑局部最优，选择后不能进行更改。因此将饮料的满意度按照从大到小进行排序，按顺序喝即可</li></ul><h3 id="装载问题">3、装载问题</h3><ul><li>描述：有一艘大船准备用来装载货物。所有待装货物都装在货箱中且所有货箱的大小都一样，但货箱的重量都各不相同。设第i个货箱的重量为<span class="math inline">\(w_i\)</span>（1≤i≤n），而货箱的最大载重量为c，目的：在货船上更多的货物。</li><li>思考：将货物按照从小到大进行排序，按顺序载入船中</li></ul><h2 id="活动安排问题">2、活动安排问题</h2><ul><li>描述：在所给的活动集合中选出一个最大相容的活动子集合。}设有n个活动的集合E={1,2,…,n}，其中每个活动都要求使用同一资源（如一个阶梯教室等），而在同一时间内只有一个活动能使用这一资源。每个活动i都有一个要求使用该资源的起始时间<span class="math inline">\(s_i\)</span>和一个结束时间<span class="math inline">\(f_i\)</span>，且<span class="math inline">\(0&lt;=s_i&lt;f_i&lt;0\)</span>。如果选择了活动i，则它在半开时间区间<span class="math inline">\([s_i, f_i)\)</span>内占用资源;若区间<span class="math inline">\([s_i, f_i)\)</span>与区间<span class="math inline">\([s_j,f_j)\)</span>不相交，则称活动i与活动j是相容的。也就是说，当<span class="math inline">\(s_i≥f_j\)</span>或<span class="math inline">\(s_j≥f_i\)</span>时，活动i与活动j相容。</li><li>思考：对于这个问题来说，当一个活动结束时间越早，对后面的活动来说越好。当选择第一个活动时，选择结束时间最早的活动，这样对于后面的活动来说更好进行选择；在选择第二个活动时，同样选择当前结束时间最早的活动。</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">activity_selection</span><span class="token punctuation">(</span>activities<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 按活动结束时间排序</span>    activities<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># 选择第一个活动</span>    selected_activities <span class="token operator">=</span> <span class="token punctuation">[</span>activities<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    last_end_time <span class="token operator">=</span> activities<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment"># 遍历剩余的活动</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>activities<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> activities<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">>=</span> last_end_time<span class="token punctuation">:</span>            selected_activities<span class="token punctuation">.</span>append<span class="token punctuation">(</span>activities<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            last_end_time <span class="token operator">=</span> activities<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> selected_activities<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment"># 活动列表，每个活动用 (开始时间, 结束时间) 表示</span>    activities <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    selected_activities <span class="token operator">=</span> activity_selection<span class="token punctuation">(</span>activities<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"选择的活动:"</span><span class="token punctuation">,</span> selected_activities<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="背包问题组合优化问题">3、背包问题：组合优化问题</h2><ul><li>描述：有一个贼在偷窃一家商店时发现有N件物品；第i件物品值<span class="math inline">\(p_i\)</span>元，重<span class="math inline">\(w_i\)</span>磅（1≤i≤N），且都是整数。他希望带走的东西越值钱越好，但他的背包中最多能装下M磅的东西（整数）。</li></ul><p><img src="/2025/01/04/%E7%AE%97%E6%B3%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AE%97%E6%B3%95-4/image-20250105212412323.png" alt="image-20250105212412323" style="zoom:50%;"></p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fractional_knapsack</span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> weights<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 计算每个物品的单位重量价值</span>    item_values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> weights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> weights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>weights<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token comment"># 按单位重量价值从高到低排序</span>    item_values<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    total_value <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">for</span> value_per_weight<span class="token punctuation">,</span> weight<span class="token punctuation">,</span> value <span class="token keyword">in</span> item_values<span class="token punctuation">:</span>        <span class="token keyword">if</span> capacity <span class="token operator">>=</span> weight<span class="token punctuation">:</span>            <span class="token comment"># 如果背包容量大于等于物品重量，全部装入</span>            capacity <span class="token operator">-=</span> weight            total_value <span class="token operator">+=</span> value        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment"># 否则，装入部分物品</span>            total_value <span class="token operator">+=</span> value_per_weight <span class="token operator">*</span> capacity            <span class="token keyword">break</span>    <span class="token keyword">return</span> total_value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>贪心算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态规划</title>
    <link href="/2024/12/29/%E7%AE%97%E6%B3%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AE%97%E6%B3%95-3/"/>
    <url>/2024/12/29/%E7%AE%97%E6%B3%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AE%97%E6%B3%95-3/</url>
    
    <content type="html"><![CDATA[<h1 id="动态规划">动态规划</h1><blockquote><p>基本思想：将待求解问题分解成若干子问题，先求解子问题，再结合这些子问题的解得到原问题的解，这一点与分治思想类似。但是，使用动态规划算法求解的问题经过分解得到的子问题==往往不是相互独立的==.也就是子问题求解时存在重叠。动态规划是一个用来解决==多段决策过程最优==的通用方法。==在动态规划算法，多阶段决策过程，每步求解的问题都是后面阶段求解问题的子问题，每部决策将依赖于以前步骤的决策==。</p><p>在分治法中，会造成分解得到的子问题过多，导致解决原问题要耗费的时间非常多，而且相同的子问题会被==重复多次计算==。如果能够保存已求得的解，就可以避免重复的大量计算。因此可以使用一个表进行记录已解决的问题答案，这是动态规划的基本思想。同时使用动态规划的问题应具有最优子结构性质（==即最优解包含子问题的最优解==）</p><p>如：在计算斐波那契数列时，<span class="math inline">\(fib(5)=fib(4)+fib(3)=(fib(3)+fib(2))+(fib(2)+fib(1))\)</span>多次计算<span class="math inline">\(fib(2)\)</span></p><p>当前问题满足优化原则时，使用动态规划来设计算法。所谓优化原则，就是一个最优决策序列的任何子序列本身一定是相对于子序列的初始和结束状态的最优的决策序列。</p></blockquote><p>通俗来说，动态规划的优化原则可以概括为以下几点：</p><ol type="1"><li><p><strong>分而治之</strong>：将一个复杂的问题分解成一系列更小的子问题，这些子问题通常被称为“状态”。每个状态对应于问题的一个特定阶段或部分。</p></li><li><p><strong>最优子结构</strong>：一个问题的最优解包含其子问题的最优解。这意味着，如果你能解决子问题，就能通过某种方式组合这些子问题的解来解决整个问题。</p></li><li><p><strong>重叠子问题</strong>：在递归解决子问题的过程中，相同的子问题会被多次求解。动态规划通过存储这些子问题的解（通常是在表格或数组中），避免重复计算，从而提高效率。</p></li><li><p><strong>记忆化</strong>：在递归过程中，每当解决一个子问题，就将其结果存储起来（这个过程称为“记忆化”）。当再次遇到相同的子问题时，直接使用存储的结果，而不是重新计算。</p></li><li><p><strong>自底向上</strong>：动态规划通常采用自底向上的方法，即从最简单的子问题开始解决，逐步构建到复杂问题的解。这与分治法的自顶向下的方法不同。</p></li><li><p><strong>状态转移方程</strong>：动态规划问题通常有一个或多个状态转移方程，这些方程定义了如何从一个或多个状态的解构建出新状态的解。</p></li><li><p><strong>边界条件</strong>：在动态规划中，需要明确定义问题的边界条件，即最简单的子问题的解。这些边界条件是构建整个问题解的基础。</p></li></ol><p>动态规划算法适用于解最优化问题，步骤设计：</p><ul><li>找出最优解的性质，并刻画其结构特征</li><li>递归地定义最优值</li><li>以自底向上的方式计算最优值，记录构造最优解所必需的信息</li><li>根据计算最优值得到的结构，构造最优解</li></ul><h2 id="范例斐波那契数列">1、范例：斐波那契数列</h2><p>斐波那契数列是一个经典的动态规划问题。斐波那契数列的定义是：F(0) = 0,F(1) = 1, 且对于n &gt; 1, F(n) = F(n-1) + F(n-2)。</p><ol type="1"><li>识别问题的结构</li></ol><p>斐波那契数列具有重叠子问题和最优子结构的特性。计算F(n)需要知道F(n-1)和F(n-2)，而计算F(n-1)又需要知道F(n-2)和F(n-3)，以此类推。</p><ol start="2" type="1"><li>定义状态</li></ol><p>定义状态F(n)为斐波那契数列的第n项。</p><ol start="3" type="1"><li>确定状态转移方程</li></ol><p>状态转移方程为：F(n) = F(n-1) + F(n-2)。</p><ol start="4" type="1"><li>确定边界条件</li></ol><p>边界条件为：F(0) = 0, F(1) = 1。</p><ol start="5" type="1"><li>选择计算顺序</li></ol><p>我们可以选择自底向上的迭代方法来计算斐波那契数列。</p><ol start="6" type="1"><li>实现算法</li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">elif</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ol start="7" type="1"><li>提取最终解</li></ol><p>最终解是<span class="math inline">\(dp[n]\)</span>，即斐波那契数列的第n项。</p><h2 id="矩阵链乘法">2、矩阵链乘法</h2><ul><li>描述：给定n个矩阵的链&lt;<span class="math inline">\(A_1\)</span>,<span class="math inline">\(A_2\)</span>,……，<span class="math inline">\(A_n\)</span>&gt;，其中<span class="math inline">\(A_i\)</span>与<span class="math inline">\(A_{i+1}\)</span>是是可乘的，矩阵<span class="math inline">\(A_i\)</span>的维数为1<span class="math inline">\(P_i \timesP_i\)</span>，如何确定计算矩阵的乘积的计算次序（完全括号化方式），使得依次次序计算矩阵链的乘积需要的次数最少</li><li>思考：设<span class="math inline">\(A[i:j]\)</span>表示<span class="math inline">\(A_i\)</span>到<span class="math inline">\(A_j\)</span>的连续矩阵相乘的计算量，如果计算<span class="math inline">\(A[i:j]\)</span>的最优计算量，可以将这个计算次序在<span class="math inline">\(A[k]\)</span>与<span class="math inline">\(A[k+1]\)</span>之间进行断开，<span class="math inline">\(A[i:j]\)</span>的计算量可以表示为<span class="math inline">\(A[i:k]\)</span>的计算量加上<span class="math inline">\(A[k+1:j]\)</span>的计算量，再加上<span class="math inline">\(A[i:k]\)</span>与<span class="math inline">\(A[k+1:j]\)</span>相乘的计算量。</li></ul><ol type="1"><li><p><strong>定义问题</strong>：设<span class="math inline">\(A_i\)</span>的维度为<span class="math inline">\(p_{i-1} \timesp_i\)</span>，我们需要找到一个完全括号化的方式，使得计算<span class="math inline">\(A_1A_2...A_n\)</span>的乘法次数最少。</p></li><li><p><strong>状态定义</strong>：定义<span class="math inline">\(m[i][j]\)</span>为计算<span class="math inline">\(A[i:j]\)</span>（即从第<span class="math inline">\(i\)</span>个矩阵到第<span class="math inline">\(j\)</span>个矩阵的乘积）的最小乘法次数。</p></li><li><p><strong>状态转移方程</strong>：对于<span class="math inline">\(i\leq k &lt; j\)</span>，我们可以在<span class="math inline">\(A_k\)</span>和<span class="math inline">\(A_{k+1}\)</span>之间断开，那么<span class="math inline">\(m[i][j]\)</span>可以表示为： $ m[i][j] = <em>{i k&lt; j} (m[i][k] + m[k+1][j] + p</em>{i-1}p_kp_j) $ 其中，<span class="math inline">\(m[i][k]\)</span>是计算<span class="math inline">\(A[i:k]\)</span>的最小乘法次数，<span class="math inline">\(m[k+1][j]\)</span>是计算<span class="math inline">\(A[k+1:j]\)</span>的最小乘法次数，<span class="math inline">\(p_{i-1}p_kp_j\)</span>是将<span class="math inline">\(A[i:k]\)</span>和<span class="math inline">\(A[k+1:j]\)</span>相乘的乘法次数。</p></li><li><p><strong>边界条件</strong>：当<span class="math inline">\(i =j\)</span>时，即只有一个矩阵，不需要乘法，所以<span class="math inline">\(m[i][i] = 0\)</span>。</p></li><li><p><strong>计算顺序</strong>：我们从最小的子问题开始，即先计算<span class="math inline">\(m[i][i+1]\)</span>，然后是<span class="math inline">\(m[i][i+2]\)</span>，以此类推，直到计算出<span class="math inline">\(m[1][n]\)</span>，即整个矩阵链的最小乘法次数。</p></li><li><p><strong>构造解</strong>：在计算<span class="math inline">\(m[i][j]\)</span>的同时，我们还需要记录最优断开点<span class="math inline">\(k\)</span>，以便最后能够构造出最优的完全括号化方式。</p></li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#利用递归实现，存在大量重复计算，比如函数中计算的当前状态下最优的t并未保存下来</span><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>i<span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">,</span>j<span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">,</span>lst<span class="token punctuation">:</span><span class="token builtin">list</span><span class="token punctuation">,</span>matrix<span class="token punctuation">:</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token builtin">int</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    i:用于记录矩阵序号    j:用于记录矩阵序号    lst:用于记录最优分割点    matrix:记录矩阵维数的列表    '''</span>    <span class="token keyword">if</span> i<span class="token operator">==</span>j<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    u<span class="token operator">=</span>fun<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span><span class="token builtin">list</span><span class="token punctuation">,</span>matrix<span class="token punctuation">)</span><span class="token operator">+</span>fun<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span>lst<span class="token punctuation">,</span>matrix<span class="token punctuation">)</span><span class="token operator">+</span>matrix<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    lst<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>i    <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">:</span>        t<span class="token operator">=</span>fun<span class="token punctuation">(</span>i<span class="token punctuation">,</span>k<span class="token punctuation">,</span>lst<span class="token punctuation">,</span>matrix<span class="token punctuation">)</span><span class="token operator">+</span>fun<span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span>lst<span class="token punctuation">,</span>matrix<span class="token punctuation">)</span><span class="token operator">+</span>matrix<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>matrix<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span>matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span>        <span class="token keyword">if</span> t<span class="token operator">&lt;</span>u<span class="token punctuation">:</span>            u<span class="token operator">=</span>t            lst<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token keyword">return</span> u<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#去除递归，记录已经计算得到的结果</span><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token builtin">list</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    p:记录各个矩阵维数的列表    m:列表，用于记录当前最优的分割点    s:列表，用于记录当前最优的相乘次数    '''</span>    <span class="token comment">#初始化</span>    n<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token comment">#矩阵数量</span>    m<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>    s<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> l <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#用于表示当前考虑的矩阵链长度，最短是2</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#用于表示矩阵链的起始位置</span>            j<span class="token operator">=</span>i<span class="token operator">+</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token comment">#这是当前矩阵链的结束位置</span>            m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span><span class="token comment">#初始化当前子问题的最优解，初始为正无穷</span>            <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#用于表示分割点位置</span>                q<span class="token operator">=</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>m<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>p<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>p<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">#计算当前分割点的矩阵链乘数</span>                <span class="token keyword">if</span> q<span class="token operator">&lt;</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token comment">#判断是否更优</span>                    m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>q                    s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>k    <span class="token keyword">return</span> m<span class="token punctuation">,</span>s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="最长公共子序列">3、最长公共子序列</h2><ul><li>描述：字符序列的子序列是指从给定字符序列中随意地（不一定连续）去掉若干个字符（可能一个也不去掉）后所形成的字符序列。令给定的字符序列X=“<span class="math inline">\(x_0，x_1，…，x_{m-1}\)</span>”，序列Y=“<span class="math inline">\(y_0，y_1，…，y_{k-1}\)</span>”是X的子序列，存在X的一个严格递增下标序列<span class="math inline">\(&lt;i_0，i_1，…，i_{k-1}&gt;\)</span>，使得对所有的<span class="math inline">\(j=0，1，…，k-1\)</span>，有<span class="math inline">\(x_{ij}\)</span>=<span class="math inline">\(y_j\)</span>。例如，X=“ABCBDAB”，Y=“BCDB”是X的一个子序列。给定一个序列Z，该序列既是Y的子序列，又是X的子序列，称Z是X和Y的公共子序列。</li><li>思考：求两个数组<span class="math inline">\(A[n]\)</span>和<span class="math inline">\(B[m]\)</span>的最长公共子序列，可以自底而上地进行考虑。举例，当这两个数组的长度为0时，则最长公共子序列为0，使用<span class="math inline">\(M[0][0]\)</span>进行记录；当A数组长度为1，数组长度为0时，使用<span class="math inline">\(M[1][0]\)</span>进行记录。已知无论哪个数组长度为0时，这个的最长公共子序列都为0，因此<span class="math inline">\(M[0][y]=0\)</span>，<span class="math inline">\(M[x][0]=0\)</span>；当数组长度都为1时，此时<span class="math inline">\(M[1][0]\)</span>和<span class="math inline">\(M[0][1]\)</span>已知，只需要比较<span class="math inline">\(A[1]\)</span>和<span class="math inline">\(B[1]\)</span>是否相等，相等则加1，不相等则加0，因此<span class="math inline">\(M[1][1]=max(M[0][1],M[1],[0])+1或0\)</span></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>A<span class="token punctuation">:</span><span class="token builtin">list</span><span class="token punctuation">,</span>B<span class="token punctuation">:</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token builtin">int</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    A,B：传入的两个一维数组    M：用于记录当前最优解    '''</span>    <span class="token comment">#初始化M</span>    M<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                M<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token builtin">max</span><span class="token punctuation">(</span>M<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>M<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                M<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token builtin">max</span><span class="token punctuation">(</span>M<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>M<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> M<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    A<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span>    B<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>fun<span class="token punctuation">(</span>A<span class="token punctuation">,</span>B<span class="token punctuation">)</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="最大子段和">4、最大子段和</h2><ul><li><p>描述：给定由n个整数(可能为负整数)组成的序列<span class="math inline">\(a_1,a_2,…,a_n\)</span>，求该序列形如<span class="math inline">\(\sum_{n=i}^ja_n\)</span>的子段和的最大值。当所有和为负整数时定义其最大子段和为0。</p></li><li><p>思考：自底而上，m用于表示子段结束位置。假设数组A长度为2，当m=0时，当前子段只有一个数，使用<span class="math inline">\(M[0]\)</span>记录当前值作为当前子段和最优解；当m=1时，使用<span class="math inline">\(M[1]\)</span>记录当前子段的最优解，<span class="math inline">\(M[1]=max(A[0],M[0]+A[1])\)</span>。</p></li><li><p>疑问：为什么是<span class="math inline">\(M[1]=max(A[0],M[0]+A[1])\)</span>而不是<span class="math inline">\(M[1]=max(M[0],M[0]+A[1])\)</span>？</p><ul><li><p>对于每个元素<span class="math inline">\(a_i\)</span>，我们有两种选择：要么将<span class="math inline">\(a_i\)</span>加入到前一个子段中，要么从<span class="math inline">\(a_i\)</span>开始一个新的子段。因此，<span class="math inline">\(M[i]\)</span>的值应该是这两种选择中的最大值。</p><p>具体来说，对于<span class="math inline">\(M[1]\)</span>的计算，我们有以下两种情况：</p><ol type="1"><li>从<span class="math inline">\(a_0\)</span>开始的子段加上<span class="math inline">\(a_1\)</span>，即<span class="math inline">\(M[0] +a_1\)</span>。</li><li>从<span class="math inline">\(a_1\)</span>开始一个新的子段，即<span class="math inline">\(a_1\)</span>本身。</li></ol><p>因此，<span class="math inline">\(M[1]\)</span>的值应该是这两种情况中的最大值，即<span class="math inline">\(M[1] = \max(a_1, M[0] + a_1)\)</span>。</p><p>所以，<span class="math inline">\(M[1] = \max(A[0], M[0] +A[1])\)</span>是正确的，因为它考虑了从<span class="math inline">\(a_1\)</span>开始新子段的情况和将<span class="math inline">\(a_1\)</span>加入到以<span class="math inline">\(a_0\)</span>结尾的子段中的情况。而<span class="math inline">\(M[1] = \max(M[0], M[0] +A[1])\)</span>是错误的，因为它没有考虑从<span class="math inline">\(a_1\)</span>开始新子段的情况，只考虑了将<span class="math inline">\(a_1\)</span>加入到以<span class="math inline">\(a_0\)</span>结尾的子段中的情况。</p><p>因此，正确的表达式是<span class="math inline">\(M[1] = \max(A[0],M[0] + A[1])\)</span>。</p></li></ul></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>nums<span class="token punctuation">:</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token builtin">int</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    maxSum:用于记录全局最优解    current：用于记录当前最优解    '''</span>    maxSum<span class="token operator">=</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    current<span class="token operator">=</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        current<span class="token operator">=</span><span class="token builtin">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>current<span class="token punctuation">)</span>        maxSum<span class="token operator">=</span><span class="token builtin">max</span><span class="token punctuation">(</span>maxSum<span class="token punctuation">,</span>current<span class="token punctuation">)</span>    reuturn maxSum<span class="token comment">#记录最优解的起始位置</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>nums<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">tuple</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    maxSum: 用于记录全局最优解    current: 用于记录当前最优解    start: 当前子段的起始位置    end: 当前子段的结束位置    temp_start: 临时起始位置，用于更新start    '''</span>    maxSum <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    current <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    start <span class="token operator">=</span> <span class="token number">0</span>    end <span class="token operator">=</span> <span class="token number">0</span>    temp_start <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> current<span class="token punctuation">:</span>            current <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            temp_start <span class="token operator">=</span> i        <span class="token keyword">else</span><span class="token punctuation">:</span>            current <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">if</span> current <span class="token operator">></span> maxSum<span class="token punctuation">:</span>            maxSum <span class="token operator">=</span> current            start <span class="token operator">=</span> temp_start            end <span class="token operator">=</span> i    <span class="token keyword">return</span> maxSum<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>注：该问题可以使用顺序求和、分治法、动态规划等算法进行解决</p><h2 id="背包问题">5、0-1背包问题</h2><ul><li><p>描述：有n个物品，它们有各自的重量和价值，现有给定容量的背包，如何让背包里装入的物品具有最大的价值总和？有n种可选物1，…，n，放入容量为c的背包内，背包容量不足以装入所有物品，使装入的物品具有最大效益。</p></li><li><p>思考：</p><ul><li>有 $ n $ 个物品，每个物品的重量为 $ w_i $，价值为 $ v_i $。</li><li>背包的重量限制为 $ W $。</li><li>求解在重量限制 $ W $ 内，背包中可以装入的物品的最大价值。</li></ul><ol type="1"><li><strong>定义状态</strong>：<ul><li>令 $ dp[i][j] $ 表示前 $ i $ 个物品中，总重量不超过 $ j $时的最大价值。</li></ul></li><li><strong>状态转移方程</strong>：<ul><li>对于第 $ i $ 个物品，有两种选择：装入背包或不装入背包。</li><li>如果不装入背包，那么 <span class="math inline">\(dp[i][j]=dp[i-1][j]\)</span>。</li><li>如果装入背包，那么 $ dp[i][j] = dp[i-1][j-w_i] + v_i $（前提是 $ jw_i $）。</li><li>因此，状态转移方程为： $ dp[i][j] = (dp[i-1][j], dp[i-1][j-w_i] +v_i) j w_i $ $ dp[i][j] = dp[i-1][j] j &lt; w_i $</li></ul></li><li><strong>初始化</strong>：<ul><li>$dp[0][j] = 0 $对于所有 $ j $，表示没有物品时，任何重量的背包价值为0。</li><li>$dp[i][0] = 0 $对于所有 <span class="math inline">\(i\)</span>，表示重量为 0的背包，无论有多少物品，价值为 0。</li></ul></li><li><strong>计算顺序</strong>：<ul><li>按照 $ i $ 从 1 到 $ n $，对于每个 $ i $，按照 $ j $ 从 0 到 $ W $计算 $ dp[i][j] $。</li></ul></li><li><strong>最终答案</strong>：<ul><li>最大价值为 $ dp[n][W] $。</li></ul></li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">knapsack</span><span class="token punctuation">(</span>W<span class="token punctuation">,</span> weights<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>weights<span class="token punctuation">)</span>    dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>W <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>W <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> j <span class="token operator">>=</span> weights<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>weights<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> values<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>W<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>递归和分治</title>
    <link href="/2024/12/27/%E7%AE%97%E6%B3%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AE%97%E6%B3%95-2/"/>
    <url>/2024/12/27/%E7%AE%97%E6%B3%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AE%97%E6%B3%95-2/</url>
    
    <content type="html"><![CDATA[<h1 id="递归与分治">递归与分治</h1><h2 id="一递归">一、递归</h2><h3 id="阶乘函数">1、阶乘函数</h3><blockquote><p>递归基本思想：直接或间接调用自身的算法称为递归算法</p></blockquote><ol type="1"><li>阶乘函数</li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> n <span class="token operator">*</span> factorial<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ol start="2" type="1"><li>阶乘函数的尾递归版本</li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> acc<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> acc    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> factorial<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> acc<span class="token operator">*</span>n<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="斐波那契数列">2、斐波那契数列</h3><ol type="1"><li>斐波那契数列</li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">elif</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> fibonacci<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> fibonacci<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ol start="3" type="1"><li>计算斐波那契数列的尾递归版本 <figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> a    <span class="token keyword">elif</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> b    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> fibonacci<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> a<span class="token operator">+</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></li></ol><h3 id="排列问题">3、排列问题</h3><ul><li>描述：对数组中的元素进行全排列</li><li>思考：对一个长度为n的数组进行排序，相当于将这个数组中的每一个元素分别提取出来，再将剩下的元素进行全排列。也就是说，将每一个元素提取出来放在数组的最前面，剩下的元素再进行全排列。</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">Perm</span><span class="token punctuation">(</span>nums<span class="token punctuation">:</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span>l<span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">,</span>r<span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token boolean">None</span><span class="token punctuation">:</span>  <span class="token comment"># noqa: E741</span>    <span class="token triple-quoted-string string">'''    nums:用于存放数组    l:是数组的左边界，会变化，要进行交换的位置    r：是数组的右边界    '''</span>    <span class="token keyword">if</span> l<span class="token operator">==</span>r<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        i<span class="token operator">=</span>l        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># //交换位置</span>            swap<span class="token punctuation">(</span>nums<span class="token punctuation">,</span>l<span class="token punctuation">,</span>i<span class="token punctuation">)</span>            <span class="token comment"># //进行递归</span>            Perm<span class="token punctuation">(</span>nums<span class="token punctuation">,</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span>            swap<span class="token punctuation">(</span>nums<span class="token punctuation">,</span>l<span class="token punctuation">,</span>i<span class="token punctuation">)</span>            i<span class="token operator">+=</span><span class="token number">1</span><span class="token keyword">def</span> <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    temp<span class="token operator">=</span>nums<span class="token punctuation">[</span>b<span class="token punctuation">]</span>    nums<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>a<span class="token punctuation">]</span>    nums<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span>tempnums<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>Perm<span class="token punctuation">(</span>nums<span class="token punctuation">,</span>l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="整数划分问题">4、整数划分问题</h3><ul><li>描述：将一个整数划分成一系列整数的和</li><li>思考：这是一个双递归函数。在正整数n的所有划分中，将最大加数<span class="math inline">\(n_1\)</span>不大于m的划分个数记作<span class="math inline">\(q(n,m)\)</span></li></ul><p><span class="math display">\[q(n,m)=\begin{cases}1,&amp;\text{n=1,m=1}\\q(n,n),&amp;\text{n&lt;m}\\1+q(n,n-1),&amp;\text{n=m}\\q(n,m-1)+q(n-m,m),&amp;\text{n&gt;m&gt;1}\end{cases}\]</span></p><p>根据n和m的关系，考虑以下几种情况：</p><ol type="1"><li><p>当n=1时，不论m的值为多少（m&gt;0)，只有一种划分即{1};</p></li><li><p>当m=1时，不论n的值为多少，只有一种划分即n个1，{1,1,1,...,1};</p></li><li><p>当n=m时，根据划分中是否包含n，可以分为两种情况：划分中包含n的情况，只有一个即{n}；</p><ol type="1"><li>划分中不包含n的情况，这时划分中最大的数字也一定比n小，即n的所有(n-1)划分。因此 f(n,n) =1 + f(n,n-1);</li><li>当n&lt;m时，由于划分中不可能出现负数，因此就相当于f(n,n);</li></ol></li><li><p>但n&gt;m时，根据划分中是否包含最大值m，可以分为两种情况：</p></li><li><p>划分中包含m的情况，即{m, {x1,x2,...xi}}, 其中{x1,x2,... xi}的和为n-m，因此这情况下为f(n-m,m)</p></li><li><p>划分中不包含m的情况，则划分中所有值都比m小，即n的(m-1)划分，个数为f(n,m-1);因此 f(n, m) = f(n-m, m)+f(n,m-1);</p></li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">q</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">,</span>m<span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token builtin">int</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token keyword">or</span> m<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">elif</span> n<span class="token operator">==</span><span class="token number">1</span> <span class="token keyword">or</span> m<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">elif</span> n<span class="token operator">==</span>m<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">+</span>q<span class="token punctuation">(</span>n<span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> n<span class="token operator">&lt;</span>m<span class="token punctuation">:</span>        <span class="token keyword">return</span> q<span class="token punctuation">(</span>n<span class="token punctuation">,</span>n<span class="token punctuation">)</span>    <span class="token keyword">elif</span> n<span class="token operator">></span>m<span class="token punctuation">:</span>        <span class="token keyword">return</span> q<span class="token punctuation">(</span>n<span class="token punctuation">,</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>q<span class="token punctuation">(</span>n<span class="token operator">-</span>m<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>递归算法的优点：结构清晰，可读性强，而且容易使用数学归纳法来证明算法的正确性。</p><p>递归算法的缺点：算法的运行效率较低，时间和空间消耗都比非递归算法要多。</p></blockquote><h2 id="二分治">二、分治</h2><blockquote><p>基本思想：将一个规模为n的问题分解为k个规模较小的子问题，这些子问题相互独立且与原问题相同，通过递归解决这些子问题，然后将各个子问题的解合并得到原问题的解。</p><p>分割原则：</p><ul><li>如何对原问题进行分割？<ul><li>在实践中发现，在使用分治法设计算法时，最好使得子问题的规模大致相同</li></ul></li></ul></blockquote><h3 id="棋盘覆盖算法">1、棋盘覆盖算法</h3><ul><li>描述：在一个<span class="math inline">\(2^k \times2^k\)</span>个方格组成的棋盘中，有一个方格与其他方格不同，则称该方格为一个特殊方格，且称该棋盘为一个特殊棋盘。在棋盘覆盖问题中，要用的4种不同形态的L型骨牌覆盖一个给定的特殊棋盘上除特殊方格以外的所有方格，且任何2个L型骨牌不得重叠覆盖。易知，在任何一个<span class="math inline">\(2^k \times2^k\)</span>的棋盘覆盖中，用到的L型骨牌个数恰为<span class="math inline">\((4^k-1)/3\)</span>。</li><li>思考：面对一个<span class="math inline">\(2^k \times2^k\)</span>个方格组成的棋盘，将其分成四个等大的小棋盘，如果存在一个特殊方格在一个小棋盘上，则将这个L型的骨牌覆盖其他三个小棋盘。</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>tr<span class="token punctuation">,</span> tc<span class="token punctuation">,</span> dr<span class="token punctuation">,</span> dc<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> ti<span class="token punctuation">,</span> matrix    <span class="token keyword">if</span> size <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span>  <span class="token comment"># 当棋盘分割到1x1时终止递归</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> size <span class="token operator">//</span> <span class="token number">2</span>  <span class="token comment"># 分割棋盘</span>        ti <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># 对骨牌进行编号</span>        t<span class="token operator">=</span>ti        <span class="token comment"># 检查特殊方块在哪个子棋盘</span>        <span class="token keyword">if</span> dr <span class="token operator">&lt;</span> tr <span class="token operator">+</span> s <span class="token keyword">and</span> dc <span class="token operator">&lt;</span> tc <span class="token operator">+</span> s<span class="token punctuation">:</span>  <span class="token comment"># 左上子棋盘</span>            func<span class="token punctuation">(</span>tr<span class="token punctuation">,</span> tc<span class="token punctuation">,</span> dr<span class="token punctuation">,</span> dc<span class="token punctuation">,</span> s<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment"># 左上子棋盘放置L型骨牌</span>            matrix<span class="token punctuation">[</span>tr <span class="token operator">+</span> s <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>tc <span class="token operator">+</span> s <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> t            func<span class="token punctuation">(</span>tr<span class="token punctuation">,</span> tc<span class="token punctuation">,</span> tr <span class="token operator">+</span> s <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> tc <span class="token operator">+</span> s <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>        <span class="token keyword">if</span> dr <span class="token operator">&lt;</span> tr <span class="token operator">+</span> s <span class="token keyword">and</span> dc <span class="token operator">>=</span> tc <span class="token operator">+</span> s<span class="token punctuation">:</span>  <span class="token comment"># 右上子棋盘</span>            func<span class="token punctuation">(</span>tr<span class="token punctuation">,</span> tc <span class="token operator">+</span> s<span class="token punctuation">,</span> dr<span class="token punctuation">,</span> dc<span class="token punctuation">,</span> s<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment"># 右上子棋盘放置L型骨牌</span>            matrix<span class="token punctuation">[</span>tr <span class="token operator">+</span> s <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>tc <span class="token operator">+</span> s<span class="token punctuation">]</span> <span class="token operator">=</span> t            func<span class="token punctuation">(</span>tr<span class="token punctuation">,</span> tc <span class="token operator">+</span> s<span class="token punctuation">,</span> tr <span class="token operator">+</span> s <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> tc <span class="token operator">+</span> s<span class="token punctuation">,</span> s<span class="token punctuation">)</span>        <span class="token keyword">if</span> dr <span class="token operator">>=</span> tr <span class="token operator">+</span> s <span class="token keyword">and</span> dc <span class="token operator">&lt;</span> tc <span class="token operator">+</span> s<span class="token punctuation">:</span>  <span class="token comment"># 左下子棋盘</span>            func<span class="token punctuation">(</span>tr <span class="token operator">+</span> s<span class="token punctuation">,</span> tc<span class="token punctuation">,</span> dr<span class="token punctuation">,</span> dc<span class="token punctuation">,</span> s<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment"># 左下子棋盘放置L型骨牌</span>            matrix<span class="token punctuation">[</span>tr <span class="token operator">+</span> s<span class="token punctuation">]</span><span class="token punctuation">[</span>tc <span class="token operator">+</span> s <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> t            func<span class="token punctuation">(</span>tr <span class="token operator">+</span> s<span class="token punctuation">,</span> tc<span class="token punctuation">,</span> tr <span class="token operator">+</span> s<span class="token punctuation">,</span> tc <span class="token operator">+</span> s <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>        <span class="token keyword">if</span> dr <span class="token operator">>=</span> tr <span class="token operator">+</span> s <span class="token keyword">and</span> dc <span class="token operator">>=</span> tc <span class="token operator">+</span> s<span class="token punctuation">:</span>  <span class="token comment"># 右下子棋盘</span>            func<span class="token punctuation">(</span>tr <span class="token operator">+</span> s<span class="token punctuation">,</span> tc <span class="token operator">+</span> s<span class="token punctuation">,</span> dr<span class="token punctuation">,</span> dc<span class="token punctuation">,</span> s<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment"># 右下子棋盘放置L型骨牌</span>            matrix<span class="token punctuation">[</span>tr <span class="token operator">+</span> s<span class="token punctuation">]</span><span class="token punctuation">[</span>tc <span class="token operator">+</span> s<span class="token punctuation">]</span> <span class="token operator">=</span> t            func<span class="token punctuation">(</span>tr <span class="token operator">+</span> s<span class="token punctuation">,</span> tc <span class="token operator">+</span> s<span class="token punctuation">,</span> tr <span class="token operator">+</span> s<span class="token punctuation">,</span> tc <span class="token operator">+</span> s<span class="token punctuation">,</span> s<span class="token punctuation">)</span>ti <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 骨牌编号</span>matrix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">]</span>func<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token keyword">for</span> row <span class="token keyword">in</span> matrix<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="线性时间选择">2、线性时间选择</h3><ul><li>描述：在n个元素的无序数组中选择第k小元素<ul><li>当k=1时，相当于找最小值</li><li>当k=n时，相当于找最大值</li><li>当k=<span class="math inline">\(\frac{n}{2}\)</span>时，相当于找中值</li></ul></li><li>想法：对于这个数组进行以下处理<ul><li>首先进行分组，将数组中的元素每五个划分成一个数组，当单个数组中元素数量小于6时直接进行排序</li><li>对每个数组找出其中的中位数，并将所有中位数写到一个数组中，再递归找出这个由中位数组成的数组的中位数，经过这一步也就找到了原数组的中位数</li><li>根据这个中位数，对原数组进行简单的划分，分成三部分，小于中位数，等于中位数，大于中位数</li><li>通过判断k在哪一部分进行舍弃，就是小于中位数的数组长度与k进行比较</li><li>留下来的部分再重复上述步骤</li></ul></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 递归找到中间元素</span><span class="token keyword">def</span> <span class="token function">find_median</span><span class="token punctuation">(</span>sublists<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sublists<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> sublists<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>sublists<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        medians <span class="token operator">=</span> <span class="token punctuation">[</span>sublists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>sublists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sublists<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> find_median<span class="token punctuation">(</span><span class="token punctuation">[</span>medians<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>medians<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">:</span>        temp <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">return</span> temp<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        sublists <span class="token operator">=</span> <span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment">#将数组进行划分</span>        <span class="token comment"># 对每组元素进行排序</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sublists<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            sublists<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>sublists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment"># 获取其中间元素的中间元素</span>        result2 <span class="token operator">=</span> find_median<span class="token punctuation">(</span>sublists<span class="token punctuation">)</span>        <span class="token comment"># 通过比较进行舍取</span>        less_than_pivot <span class="token operator">=</span> <span class="token punctuation">[</span>num <span class="token keyword">for</span> num <span class="token keyword">in</span> nums <span class="token keyword">if</span> num <span class="token operator">&lt;</span> result2<span class="token punctuation">]</span>        equal_to_pivot <span class="token operator">=</span> <span class="token punctuation">[</span>num <span class="token keyword">for</span> num <span class="token keyword">in</span> nums <span class="token keyword">if</span> num <span class="token operator">==</span> result2<span class="token punctuation">]</span>        greater_than_pivot <span class="token operator">=</span> <span class="token punctuation">[</span>num <span class="token keyword">for</span> num <span class="token keyword">in</span> nums <span class="token keyword">if</span> num <span class="token operator">></span> result2<span class="token punctuation">]</span>        <span class="token keyword">if</span> k <span class="token operator">&lt;=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>less_than_pivot<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> find<span class="token punctuation">(</span>less_than_pivot<span class="token punctuation">,</span> k<span class="token punctuation">)</span>        <span class="token keyword">elif</span> k <span class="token operator">&lt;=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>less_than_pivot<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span>equal_to_pivot<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> result2         <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> find<span class="token punctuation">(</span>greater_than_pivot<span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>less_than_pivot<span class="token punctuation">)</span> <span class="token operator">-</span>                         <span class="token builtin">len</span><span class="token punctuation">(</span>equal_to_pivot<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="二分搜索术">3、二分搜索术</h3><ul><li>描述：将n个元素分成个数大致相同的两半，取a[n/2]与x作比较。如果x=a[n/2]，则算法终止；如果x&lt;a[n/2]，则只在数组a的左半部继续搜索x；如果x&gt;a[n/2]，则只在数组a的右半部继续搜索x。</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>nums<span class="token punctuation">:</span><span class="token builtin">list</span><span class="token punctuation">,</span>x<span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">,</span>l<span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">,</span>r<span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token builtin">bool</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    nums:数组列表    x:目标搜索对象    l:左边界    r:右边界    '''</span>    <span class="token keyword">if</span> l<span class="token operator">></span>r<span class="token punctuation">:</span>        <span class="token keyword">return</span> false    <span class="token keyword">else</span><span class="token punctuation">:</span>        mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span><span class="token comment">#计算中间坐标</span>        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>x<span class="token punctuation">:</span>            <span class="token keyword">return</span> true        <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>x<span class="token punctuation">:</span>            <span class="token keyword">return</span> fun<span class="token punctuation">(</span>nums<span class="token punctuation">,</span>x<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> fun<span class="token punctuation">(</span>nums<span class="token punctuation">,</span>x<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="循环赛日程表">4、循环赛日程表</h3><ul><li>描述：<ul><li>要求设计一个满足以下要求的比赛日程表<ul><li>共有n个选手，n=2<sup>m</sup></li><li>每个选手必须与其他n-1个选手各赛一次</li><li>每个选手一天只能赛一次</li><li>循环赛一共进行n-1天</li></ul></li></ul></li></ul><p><span class="math display">\[\begin{matrix}1&amp;2&amp;3&amp;4&amp;5&amp;6&amp;7&amp;8 \\2&amp;1&amp;4&amp;3&amp;6&amp;5&amp;8&amp;7 \\3&amp;4&amp;1&amp;2&amp;7&amp;8&amp;5&amp;6 \\4&amp;3&amp;2&amp;1&amp;8&amp;7&amp;6&amp;5 \\5&amp;6&amp;7&amp;8&amp;1&amp;2&amp;3&amp;4 \\6&amp;5&amp;8&amp;7&amp;2&amp;1&amp;4&amp;3\\7&amp;8&amp;5&amp;6&amp;3&amp;4&amp;1&amp;2\\8&amp;7&amp;6&amp;5&amp;4&amp;3&amp;1&amp;2\\\end{matrix}\tag{1}\]</span></p><ul><li>思考：<ul><li>通过矩阵可知：<ul><li>大矩阵是通过左上、右下、右上、左下四个小矩阵组成，左上=右下，右上=左下</li><li>可以将第一行看做选手编号</li><li>第i+1行可以看做第i天该选手对战的选手编号</li><li><span class="math inline">\(matrix[i+1][j]\)</span>的值表示第i天选手j对战的选手编号</li></ul></li></ul></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">m<span class="token operator">=</span><span class="token number">5</span>matrix<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">loop_schedule</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> matrix    <span class="token keyword">if</span> <span class="token builtin">len</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">+</span>col        <span class="token keyword">return</span>     <span class="token comment">#处理左上角和右下角</span>    loop_schedule<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>col<span class="token punctuation">,</span><span class="token builtin">len</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment">#处理右上角和左下角</span>    loop_schedule<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>col<span class="token operator">+</span><span class="token builtin">len</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            matrix<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token operator">//</span><span class="token number">2</span><span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token operator">+</span>j<span class="token punctuation">]</span><span class="token operator">=</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token operator">+</span><span class="token builtin">len</span><span class="token operator">//</span><span class="token number">2</span><span class="token operator">+</span>j<span class="token punctuation">]</span>            matrix<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token operator">//</span><span class="token number">2</span><span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token operator">+</span><span class="token builtin">len</span><span class="token operator">//</span><span class="token number">2</span><span class="token operator">+</span>j<span class="token punctuation">]</span><span class="token operator">=</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token operator">+</span>j<span class="token punctuation">]</span>            loop_schedule<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">**</span>m<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="三扩展">三、扩展</h2><h3 id="寻找超级水王">1、寻找超级水王</h3><ul><li>描述：在某一论坛中存在某一个ID，该ID发帖数量超过帖子总数的一半，称这个ID为水王。如何找出这个ID？通俗讲，就是一个数组中存在某个数字占该数组长度的一半以上。</li><li>思考：由于水王数的个数大于所有元素个数的一半，所以如果拿一个非水王数抵消一个水王数，最后还是会剩下水王数。上述删除不同元素的过程就是如此，还可能会存在两个非水王数互相抵消的情况，这样水王数剩下的会更多。</li><li>步骤：<ul><li>使用变量分别存放候选水王数，以及候选水王数的已遍历过的个数<ul><li>变量一candidate作为候选用来存放可能的水王数</li><li>变量二hp用来存放其剩余个数，按如下规则遍历数组：<ul><li>hp=0 代表没有candidate候选数；hp&gt;0 代表有candidate候选数</li><li>如果没有candidate，则设置当前数赋予candidate，即将当前数作为候选数，hp设置为1</li><li>如果有candidate，判断当前数是否等于candidate，相等则hp+1，不相等则hp-1</li></ul></li></ul></li><li>依次删除数组中的两个不相同的数</li><li>判断是否存在数剩余：如果存在数剩余，则水王存在；反之，水王不存在。</li></ul></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    nums:数组    candidate:当前候选水王    hp:候选水王的个数，当hp=0时，对candidate重新赋值    '''</span>    <span class="token comment">#初始化candidate</span>    candidate<span class="token operator">=</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    hp<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> nums<span class="token punctuation">:</span>        <span class="token keyword">if</span> hp<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>            candidate<span class="token operator">=</span>i            hp<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">elif</span> i<span class="token operator">!=</span>candidate<span class="token punctuation">:</span>            hp<span class="token operator">-=</span><span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            hp<span class="token operator">+=</span><span class="token number">1</span>    <span class="token keyword">if</span> hp<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'没有水王'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'水王是：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>candidate<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>            nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>fun<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="超级水王进阶">2、超级水王进阶</h3><ul><li>描述：随着Tango的发展，管理员发现，“超级水王”没有了。统计结果表明，有3个发帖很多的ID，他们的发帖数目都超过了帖子总数目N的1/4。你能从发帖ID列表中快速找出他们的ID吗？</li><li>思考：<ul><li>有三个水王，每个水王的ID出现次数超过四分之一</li><li>因此使用三个变量记录当前遍历过的不同的三个ID，同时记录在这三个ID出现的次数</li><li>在遍历过程中，如果出现不同于当前记录的这三个ID的其他ID时，分别查看这三个ID出现次数，如果这三个ID中存在次数为0的ID，则将该ID替换为当前遍历到的ID。如果这三个ID均不为0，则每个ID出现次数-1</li></ul></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-PYTHON" data-language="PYTHON"><code class="language-PYTHON">def fun(nums:list)-&gt;None:    &#39;&#39;&#39;    nums:ID列表    lst：三行两列数组，一行用于存放ID，一行用于存放ID出现次数    &#39;&#39;&#39;    lst&#x3D;[[None,0],[None,0],[None,0]]    for i in nums:        if lst[0][0]&#x3D;&#x3D;i:            lst[0][1]+&#x3D;1        elif lst[1][0]&#x3D;&#x3D;i:            lst[1][1]+&#x3D;1        elif lst[2][0]&#x3D;&#x3D;i:            lst[2][1]+&#x3D;1        elif lst[0][1]&#x3D;&#x3D;0 and lst[1][0]!&#x3D;i and lst[2][0]!&#x3D;i:            lst[0][0]&#x3D;i            lst[0][1]+&#x3D;1        elif lst[1][1]&#x3D;&#x3D;0 and lst[0][0]!&#x3D;i and lst[2][0]!&#x3D;i:            lst[1][0]&#x3D;i            lst[1][1]+&#x3D;1        elif lst[2][1]&#x3D;&#x3D;0 and lst[1][0]!&#x3D;i and lst[0][0]!&#x3D;i:            lst[2][0]&#x3D;i            lst[2][1]+&#x3D;1        elif lst[2][1]!&#x3D;i and lst[1][0]!&#x3D;i and lst[0][0]!&#x3D;i:            lst[0][1]-&#x3D;1            lst[1][1]-&#x3D;1            lst[2][1]-&#x3D;1    print(lst)nums&#x3D;[1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,4,4]fun(nums)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>递归</tag>
      
      <tag>分治</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法效率分析</title>
    <link href="/2024/12/25/%E7%AE%97%E6%B3%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AE%97%E6%B3%95-1/"/>
    <url>/2024/12/25/%E7%AE%97%E6%B3%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AE%97%E6%B3%95-1/</url>
    
    <content type="html"><![CDATA[<h1 id="算法效率基础">算法效率基础</h1><p><strong>算法分析是对算法需要多少计算时间和存储空间作定量的分析,因此算法的复杂性存在空间复杂性和时间复杂性两个方面。算法的复杂性是算法运行需要的计算机资源的量。</strong></p><h2 id="影响算法复杂性的因素">1. 影响算法复杂性的因素</h2><ol type="1"><li>要解的问题的规模：问题本身</li><li>算法的输入：要处理的数据</li><li>算法本身的函数：处理问题的方法</li></ol><h2 id="元运算">2. 元运算</h2><blockquote><p>对任何计算步骤，他的代价总是一个时间常量为上界，不管数据输入或执行的算法，我们称该步骤为“元运算”。通俗讲就是时间固定</p></blockquote><blockquote><p>举例：访问数组中的一个元素就是一个“元运算”，因为不管你的数组有多大，访问任何一个特定位置的元素所需的时间都是相同的，这个时间是一个常数，不会随着数组大小的变化而变化。</p></blockquote><h2 id="如何度量运行时间即算法的时间复杂度">3.如何度量运行时间（即算法的时间复杂度）</h2><blockquote><p>用算法的基本操作的执行次数来度量算法的时间效率</p></blockquote><blockquote><p>所谓的基本操作，就是指算法中最基本的操作，比如：赋值、比较、输入输出等。</p></blockquote><h2 id="算法复杂性符号表示">4. 算法复杂性符号表示</h2><ol type="1"><li>Θ：是渐进紧确界记号，当且仅当<span class="math inline">\(\lim\limits_{n\rightarrow\infty}\frac{f(n)}{g(n)}\)</span>存在并等于一个常数，那么f(n)=Θ(g(n))。也就是f(n)和g(n)同阶。</li><li>O：是渐进上界记号，当存在正整数c和<span class="math inline">\(n_0\)</span>，使得当n&gt;=<span class="math inline">\(n_0\)</span>时，f(n)&lt;=cg(n)。则f(n)的渐进上界是g(n),<span class="math inline">\(f(n)=O(g(n))\)</span>。通俗说当n在一定范围内时，函数f(n)的阶不高于函数g(n)。g(n)的阶越低越精确。</li><li>Ω：是渐进下界记号，当存在正整数c和<span class="math inline">\(n_0\)</span>，使得当n&gt;=<span class="math inline">\(n_0\)</span>时，f(n)&gt;=cg(n)。则f(n)的渐进下界是g(n),<span class="math inline">\(f(n)=Ω(g(n))\)</span>。通俗说当n在一定范围内时，函数f(n)的阶不低于函数g(n)。g(n)的阶越高越精确。<img src="/2024/12/25/%E7%AE%97%E6%B3%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AE%97%E6%B3%95-1/image.png" alt="'图片1'" style="zoom:67%;">## 5. 如何分析非递归算法效率</li><li>找出算法的基本操作</li><li>检查基本操作的执行次数是否只依赖输入规模</li><li>建立一个算法基本操作执行次数的求和表达式 ## 6.如何分析递归算法效率</li><li>找出递归的边界条件,一般而言递归的边界条件是n=1，而且是进行切半的操作。<span class="math display">\[T(n)=\begin{cases}O(1),&amp;\text{n=1}\\kT(n/2)+O(1),&amp;\text{n&gt;1}\end{cases}\]</span></li><li>分析递归式的解法</li><li>计算递归式的解法的执行次数</li><li>建立递归式的解法的执行次数的求和表达式（注：递归算法代码简洁，但是效率低下） ## 7. 主定理解决递归效率问题</li></ol><ul><li>主定理提供一个通用的方法来解决形如<span class="math inline">\(T(n)=aT(n/b)+f(n)\)</span>的递归式的效率问题。</li></ul><ol type="1"><li>n：是问题的规模</li><li>a：是原问题的子问题个数</li><li><span class="math inline">\(\frac{n}{b}\)</span>：是子问题的规模大小</li><li>f(n)：是将原问题分解成子问题和将子问题的解合并成原问题的解的时间<img src="/2024/12/25/%E7%AE%97%E6%B3%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AE%97%E6%B3%95-1/image-20250107223852554.png" alt="image-20250107223852554" style="zoom:50%;"></li></ol>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法效率分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/12/25/hello-world/"/>
    <url>/2024/12/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
